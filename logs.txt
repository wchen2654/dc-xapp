1737174417550 1/RMR [INFO] ric message routing library on SI95 p=4560 mv=3 flg=00 id=a (f447e29 4.9.4 built: Dec 13 2023)
{"ts":1737174417550,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"Creating app and attaching to RMR"}
{"ts":1737174418551,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"Starting app"}
{"ts":1737174418551,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"initialized northbound interface (0.0.0.0:8000"}
{"ts":1737174418551,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"started northbound interface"}
1737174418553 1/RMR [INFO] sends: ts=1737174418 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
Module loaded
1737174449557 1/RMR [INFO] sends: ts=1737174449 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174480560 1/RMR [INFO] sends: ts=1737174480 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174511674 1/RMR [INFO] sends: ts=1737174511 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.109.183.143:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174511674 1/RMR [INFO] sends: ts=1737174511 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174511674 1/RMR [INFO] sends: ts=1737174511 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174511674 1/RMR [INFO] sends: ts=1737174511 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174511674 1/RMR [INFO] sends: ts=1737174511 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceStatusRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceStatusRequest>
            <sliceNameList>
            </sliceNameList>
        </sliceStatusRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>1</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>08</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>10 00</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737174521807,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=639136590,requestor_id=864,instance_id=1,meid=enB_macro_001_001_0019b0) "}
<E2SM-KPM-EventTriggerDefinition>
    <eventDefinition-Format1>
        <policyTest-List>
            <Trigger-ConditionIE-Item>
                <report-Period-IE><ms5120/></report-Period-IE>
            </Trigger-ConditionIE-Item>
        </policyTest-List>
    </eventDefinition-Format1>
</E2SM-KPM-EventTriggerDefinition>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>8</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICsubscriptionRequest>
                <protocolIEs>
                    <RICsubscriptionRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>2</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>30</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICsubscriptionDetails>
                                <ricEventTriggerDefinition>20 48</ricEventTriggerDefinition>
                                <ricAction-ToBeSetup-List>
                                    <ProtocolIE-SingleContainer>
                                        <id>19</id>
                                        <criticality><reject/></criticality>
                                        <value>
                                            <RICaction-ToBeSetup-Item>
                                                <ricActionID>1</ricActionID>
                                                <ricActionType><report/></ricActionType>
                                            </RICaction-ToBeSetup-Item>
                                        </value>
                                    </ProtocolIE-SingleContainer>
                                </ricAction-ToBeSetup-List>
                            </RICsubscriptionDetails>
                        </value>
                    </RICsubscriptionRequest-IEs>
                </protocolIEs>
            </RICsubscriptionRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-Zylinium-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><maskStatusRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-Zylinium-ControlHeader>
<E2SM-Zylinium-ControlMessage>
    <controlMessageFormat1>
        <maskStatusRequest>
        </maskStatusRequest>
    </controlMessageFormat1>
{"ts":1737174521811,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent subscription request (xid=864.2,requestor_id=864,instance_id=2,meid=enB_macro_001_001_0019b0) "}
</E2SM-Zylinium-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>10</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>20</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-Zylinium-EventTriggerDefinition>
    <ranEventDefinition>
    </ranEventDefinition>
</E2SM-Zylinium-EventTriggerDefinition>
{"ts":1737174521811,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=1735992592,requestor_id=864,instance_id=3,meid=enB_macro_001_001_0019b0) "}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>8</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICsubscriptionRequest>
                <protocolIEs>
                    <RICsubscriptionRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>4</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>30</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICsubscriptionDetails>
                                <ricEventTriggerDefinition>00</ricEventTriggerDefinition>
                                <ricAction-ToBeSetup-List>
                                    <ProtocolIE-SingleContainer>
                                        <id>19</id>
                                        <criticality><reject/></criticality>
                                        <value>
                                            <RICaction-ToBeSetup-Item>
                                                <ricActionID>1</ricActionID>
                                                <ricActionType><report/></ricActionType>
                                            </RICaction-ToBeSetup-Item>
                                        </value>
                                    </ProtocolIE-SingleContainer>
                                </ricAction-ToBeSetup-List>
                            </RICsubscriptionDetails>
                        </value>
                    </RICsubscriptionRequest-IEs>
                </protocolIEs>
            </RICsubscriptionRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-Zylinium-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><maskConfigRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-Zylinium-ControlHeader>
<E2SM-Zylinium-ControlMessage>
    <controlMessageFormat1>
        <maskConfigRequest>
            <dlDefault>0x0</dlDefault>
            <ulDefault>0x0</ulDefault>
            <dlSched>
            </dlSched>
            <ulSched>
            </ulSched>
        </maskConfigRequest>
    </controlMessageFormat1>
</E2SM-Zylinium-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
{"ts":1737174521812,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent subscription request (xid=864.4,requestor_id=864,instance_id=4,meid=enB_macro_001_001_0019b0) "}
                        <criticality><reject/></criticality>
{"ts":1737174521813,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-1969679412,requestor_id=864,instance_id=5,meid=enB_macro_001_001_0019b0) "}
{"ts":1737174521813,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added nodeb enB_macro_001_001_0019b0"}
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>5</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>00</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>00 00 02 30 78 30 00 02 30 78 30 00 00 00 00</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737174521813,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
{"ts":1737174521816,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737174521816,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>1</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>00</RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>8</procedureCode>
        <criticality><ignore/></criticality>
{"ts":1737174521827,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12011, source enB_macro_001_001_0019b0)"}
{"ts":1737174521827,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICsubscription (8) "}
{"ts":1737174521827,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"subscription request succeeded (xid=864.2,subid=13) "}
{"ts":1737174521827,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran SubscriptionResponse handler"}
        <value>
            <RICsubscriptionResponse>
                <protocolIEs>
                    <RICsubscriptionResponse-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>17</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICaction-Admitted-List>
                                <ProtocolIE-SingleContainer>
                                    <id>14</id>
                                    <criticality><reject/></criticality>
                                    <value>
                                        <RICaction-Admitted-Item>
                                            <ricActionID>1</ricActionID>
                                        </RICaction-Admitted-Item>
                                    </value>
                                </ProtocolIE-SingleContainer>
                            </RICaction-Admitted-List>
                        </value>
                    </RICsubscriptionResponse-IEs>
                </protocolIEs>
            </RICsubscriptionResponse>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737174521858,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>5</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                00 00 02 30 78 30 00 00 01 00 00 00 02 30 78 30 
                                00 00 01 00 00 02 30 78 30 00 02 30 78 30 00 00 
                                00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-Zylinium-ControlOutcome>
    <controlOutcomeFormat1>
        <maskStatusReport>
{"ts":1737174521859,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
            <dlMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </dlMask>
            <ulMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </ulMask>
            <dlDefault>0x0</dlDefault>
            <ulDefault>0x0</ulDefault>
            <dlSched>
            </dlSched>
            <ulSched>
            </ulSched>
        </maskStatusReport>
    </controlOutcomeFormat1>
</E2SM-Zylinium-ControlOutcome>
{"ts":1737174521859,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
{"ts":1737174521862,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                00 00 02 30 78 30 00 00 01 00 00 00 02 30 78 30 
                                00 00 01 00 00 02 30 78 30 00 02 30 78 30 00 00 
                                00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737174521863,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
<E2SM-Zylinium-ControlOutcome>
    <controlOutcomeFormat1>
        <maskStatusReport>
            <dlMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </dlMask>
            <ulMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </ulMask>
            <dlDefault>0x0</dlDefault>
            <ulDefault>0x0</ulDefault>
            <dlSched>
            </dlSched>
            <ulSched>
            </ulSched>
        </maskStatusReport>
    </controlOutcomeFormat1>
</E2SM-Zylinium-ControlOutcome>
{"ts":1737174521863,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
{"ts":1737174521869,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12011, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>8</procedureCode>
        <criticality><ignore/></criticality>
        <value>
            <RICsubscriptionResponse>
                <protocolIEs>
                    <RICsubscriptionResponse-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>14</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>17</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICaction-Admitted-List>
                                <ProtocolIE-SingleContainer>
                                    <id>14</id>
                                    <criticality><reject/></criticality>
                                    <value>
                                        <RICaction-Admitted-Item>
                                            <ricActionID>1</ricActionID>
                                        </RICaction-Admitted-Item>
                                    </value>
                                </ProtocolIE-SingleContainer>
                            </RICaction-Admitted-List>
                        </value>
                    </RICsubscriptionResponse-IEs>
                </protocolIEs>
            </RICsubscriptionResponse>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737174521870,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICsubscription (8) "}
{"ts":1737174521870,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"subscription request succeeded (xid=864.4,subid=14) "}
{"ts":1737174521870,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran SubscriptionResponse handler"}
{"ts":1737174526842,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added slice fast"}
<E2AP-PDU>
{"ts":1737174526951,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>1</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
{"ts":1737174526953,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 7D 
                                00 01 00 00 46 20 11 9B 20 10 50 48 01 1F 01 00 
                                03 21 43 18 01 07 01 00 02 71 48 03 80 00 0F 00 
                                00 03 80 01 0F 06 80 F1 00 34 44 E3 00 06 80 EE 
                                00 52 EE EF 01 0F 05 80 F0 1B EF BF 01 3F 06 00 
                                EB 30 0C C1 0C 00 00 47 20 11 6E 5C 10 4E BB 01 
                                25 01 00 03 29 52 80 01 04 01 00 02 4E F0 03 80 
                                00 0F 00 00 03 80 01 0F 00 00 00 01 06 06 80 EE 
                                00 6F A6 F5 01 5C 06 00 EB 30 0C C1 15 4A 00 01 
                                50 10 08 00 F1 10 80 01 60 00 10 02 02 00 00 60 
                                07 30 0C BC 36 76 20 1B 76 5A 03 00 1A 00 01 00 
                                00 46 30 06 6E B5 E7 20 0D E2 61 00 00 47 30 06 
                                4D 82 91 20 0D 93 F9
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
{"ts":1737174526955,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174526955,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
        <indicationMessage-Format1>
{"ts":1737174526955,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=107918823,ul_bytes=909921,dl_prbs=1153824,ul_prbs=20552,tx_pkts=31,tx_errors=0,tx_brate=2179864,rx_pkts=7,rx_errors=0,rx_brate=29000,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.538,ul_mcs=20.7333,ul_samples=15,dl_mcs=27.9365,dl_samples=63,imsi=1010123456780,} ue[71]={dl_bytes=105742993,ul_bytes=889849,dl_prbs=1142364,ul_prbs=20155,tx_pkts=37,tx_errors=0,tx_brate=2708096,rx_pkts=4,rx_errors=0,rx_brate=20208,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=0,ul_samples=6,dl_mcs=27.913,dl_samples=92,imsi=1010123456789,} "}
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>1153824</dl-PRBUsage>
                                                        <ul-PRBUsage>20552</ul-PRBUsage>
                                                        <tx-pkts>31</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2179864</tx-brate>
                                                        <rx-pkts>7</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>29000</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.538177490234375</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>20.733333587646484</ul-mcs>
                                                        <ul-samples>15</ul-samples>
                                                        <dl-mcs>27.936508178710938</dl-mcs>
                                                        <dl-samples>63</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>1142364</dl-PRBUsage>
                                                        <ul-PRBUsage>20155</ul-PRBUsage>
                                                        <tx-pkts>37</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2708096</tx-brate>
                                                        <rx-pkts>4</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>20208</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>6</ul-samples>
                                                        <dl-mcs>27.913043975830078</dl-mcs>
                                                        <dl-samples>92</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>514</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>213661302</pDCPBytesDL>
                                                            <pDCPBytesUL>1799770</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>107918823</bytesDL>
                                                            <bytesUL>909921</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>105742993</bytesDL>
                                                            <bytesUL>889849</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174527107,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737174527107,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] "}
{"ts":1737174531870,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added slice secure_slice"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
{"ts":1737174532070,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>2</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8A 00 01 00 00 46 20 01 16 28 10 05 15 01 3E 01 
                                00 03 40 FB 08 01 0A 01 00 03 00 BD 50 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 EF 00 D0 C5 F3 00 06 
                                80 EE 00 5A CC CD 01 14 06 80 ED 00 DF 1C 73 01 
                                6C 06 00 EB 30 0C C1 0C 00 00 47 20 01 16 70 10 
                                04 FD 01 2F 01 02 03 31 EA 28 01 0A 01 00 03 00 
                                A9 20 03 80 00 0F 00 00 03 80 01 0F 06 80 EF 00 
                                D1 0E 6D 00 04 80 FD 00 B3 01 10 06 80 ED 00 DE 
                                D5 BF 01 67 06 00 EB 30 0C C1 15 4A 00 01 50 10 
                                08 00 F1 10 80 01 60 00 00 00 00 00 60 07 20 C9 
                                45 F2 20 01 AA C4 03 00 16 00 01 00 00 46 20 63 
                                99 60 10 D9 F4 00 00 47 20 65 AC 92 10 D0 D0
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
{"ts":1737174532071,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71208</dl-PRBUsage>
                                                        <ul-PRBUsage>1301</ul-PRBUsage>
                                                        <tx-pkts>62</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>4258568</tx-brate>
                                                        <rx-pkts>10</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>48464</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.386619567871094</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.700000762939453</ul-mcs>
                                                        <ul-samples>20</ul-samples>
                                                        <dl-mcs>27.888891220092773</dl-mcs>
                                                        <dl-samples>108</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71280</dl-PRBUsage>
                                                        <ul-PRBUsage>1277</ul-PRBUsage>
                                                        <tx-pkts>47</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>3271208</tx-brate>
                                                        <rx-pkts>10</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>43296</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.528175354003906</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.375</ul-mcs>
                                                        <ul-samples>16</ul-samples>
                                                        <dl-mcs>27.854368209838867</dl-mcs>
                                                        <dl-samples>103</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>109252</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>55796</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>53456</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174532073,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174532073,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174532074,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6527328,ul_bytes=55796,dl_prbs=71208,ul_prbs=1301,tx_pkts=62,tx_errors=0,tx_brate=4258568,rx_pkts=10,rx_errors=0,rx_brate=48464,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.387,ul_mcs=22.7,ul_samples=20,dl_mcs=27.8889,dl_samples=108,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=53456,dl_prbs=71280,ul_prbs=1277,tx_pkts=47,tx_errors=2,tx_brate=3271208,rx_pkts=10,rx_errors=0,rx_brate=43296,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.528,ul_mcs=22.375,ul_samples=16,dl_mcs=27.8544,dl_samples=103,imsi=1010123456789,} "}
{"ts":1737174532088,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737174532088,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceConfigRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceConfigRequest>
            <sliceConfigList>
                <SliceConfig>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                </SliceConfig>
            </sliceConfigList>
        </sliceConfigRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>6</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>00</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>00 00 C0 66 61 73 74 00 04 00</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737174536896,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=947425714,requestor_id=864,instance_id=6,meid=enB_macro_001_001_0019b0) "}
{"ts":1737174536896,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound slice fast to nodeb enB_macro_001_001_0019b0"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
{"ts":1737174536901,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
{"ts":1737174536901,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
                            <RICrequestID>
{"ts":1737174536902,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>6</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>01 03 66 61 73 74 00 04 00 00 00</RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
{"ts":1737174537191,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
{"ts":1737174537192,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>3</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8D 00 01 00 00 46 20 01 16 68 10 04 DF 01 50 01 
                                00 03 53 33 70 01 0F 01 00 03 00 ED 28 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 F1 00 34 42 23 00 06 
                                80 EE 00 57 6D B7 01 15 06 80 ED 00 DF 0F CD 02 
                                00 A2 06 00 EB 30 0C C1 0C 00 00 47 20 01 16 74 
                                10 04 E6 01 4C 01 01 03 53 2E D8 01 0D 01 00 03 
                                00 BB E8 03 80 00 0F 00 00 03 80 01 0F 06 80 F1 
                                00 34 3D FD 00 06 80 ED 00 AE F7 BF 01 1F 05 80 
                                F1 0D ED 73 02 00 8A 06 00 EB 30 0C C1 15 4A 00 
                                01 50 10 08 00 F1 10 80 01 60 00 00 00 00 00 60 
                                07 20 C9 45 F2 20 01 BD 0C 03 00 16 00 01 00 00 
                                46 20 65 AC 92 10 DD 00 00 00 47 20 63 99 60 10 
                                E0 0C
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71272</dl-PRBUsage>
                                                        <ul-PRBUsage>1247</ul-PRBUsage>
                                                        <tx-pkts>80</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>5452656</tx-brate>
                                                        <rx-pkts>15</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>60712</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.516693115234375</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.857143402099609</ul-mcs>
                                                        <ul-samples>21</ul-samples>
                                                        <dl-mcs>27.882715225219727</dl-mcs>
                                                        <dl-samples>162</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71284</dl-PRBUsage>
                                                        <ul-PRBUsage>1254</ul-PRBUsage>
                                                        <tx-pkts>76</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>5451480</tx-brate>
                                                        <rx-pkts>13</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>48104</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.484283447265625</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.870969772338867</ul-mcs>
                                                        <ul-samples>31</ul-samples>
                                                        <dl-mcs>27.855072021484375</dl-mcs>
                                                        <dl-samples>138</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
{"ts":1737174537195,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174537195,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>113932</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56576</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>57356</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174537195,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=56576,dl_prbs=71272,ul_prbs=1247,tx_pkts=80,tx_errors=0,tx_brate=5452656,rx_pkts=15,rx_errors=0,rx_brate=60712,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.517,ul_mcs=21.8571,ul_samples=21,dl_mcs=27.8827,dl_samples=162,imsi=1010123456780,} ue[71]={dl_bytes=6527328,ul_bytes=57356,dl_prbs=71284,ul_prbs=1254,tx_pkts=76,tx_errors=1,tx_brate=5451480,rx_pkts=13,rx_errors=0,rx_brate=48104,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.484,ul_mcs=21.871,ul_samples=31,dl_mcs=27.8551,dl_samples=138,imsi=1010123456789,} "}
{"ts":1737174537210,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737174537210,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceConfigRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceConfigRequest>
            <sliceConfigList>
                <SliceConfig>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                </SliceConfig>
            </sliceConfigList>
        </sliceConfigRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>7</ricInstanceID>
                            </RICrequestID>
                        </value>
{"ts":1737174541923,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=454561231,requestor_id=864,instance_id=7,meid=enB_macro_001_001_0019b0) "}
{"ts":1737174541923,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound slice secure_slice to nodeb enB_macro_001_001_0019b0"}
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>00</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>
                                00 02 C0 73 65 63 75 72 65 5F 73 6C 69 63 65 00 
                                00 01
                            </RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>7</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
{"ts":1737174541936,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
{"ts":1737174541936,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                02 03 66 61 73 74 00 04 00 00 00 0B 73 65 63 75 
                                72 65 5F 73 6C 69 63 65 00 00 01 00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
                <SliceStatus>
{"ts":1737174541937,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737174542311,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>4</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8C 00 01 00 00 46 20 01 16 30 10 04 E2 01 57 01 
                                00 03 5A 83 A0 01 0F 01 00 03 01 03 C8 03 80 00 
                                0F 00 00 03 80 01 0F 05 80 F2 1A 0F B3 00 05 80 
                                F0 16 52 D3 01 22 06 80 EF 00 37 02 9D 02 00 C4 
                                06 00 EB 30 0C C1 0C 00 00 47 20 01 19 50 10 04 
                                BF 01 5B 01 02 03 63 56 F8 01 0C 01 00 03 00 FD 
                                E0 03 80 00 0F 00 00 03 80 01 0F 06 80 F0 00 68 
                                7B 81 00 06 80 EE 00 59 C7 1D 01 12 06 80 EE 00 
                                6F 7E B5 02 00 C6 06 00 EB 30 0C C1 15 4A 00 01 
                                50 10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 
                                20 CB 59 24 20 01 98 48 03 00 16 00 01 00 00 46 
                                20 65 AC 92 10 D1 38 00 00 47 20 65 AC 92 10 C7 
                                10
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
{"ts":1737174542312,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71216</dl-PRBUsage>
                                                        <ul-PRBUsage>1250</ul-PRBUsage>
                                                        <tx-pkts>87</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>5931936</tx-brate>
                                                        <rx-pkts>15</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>66504</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.24530029296875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.323532104492188</ul-mcs>
                                                        <ul-samples>34</ul-samples>
                                                        <dl-mcs>27.505104064941406</dl-mcs>
                                                        <dl-samples>196</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>72016</dl-PRBUsage>
                                                        <ul-PRBUsage>1215</ul-PRBUsage>
                                                        <tx-pkts>91</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>6510328</tx-brate>
                                                        <rx-pkts>12</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>64992</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.482437133789062</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.444446563720703</ul-mcs>
                                                        <ul-samples>18</ul-samples>
                                                        <dl-mcs>27.873737335205078</dl-mcs>
                                                        <dl-samples>198</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>104520</pDCPBytesUL>
{"ts":1737174542314,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174542314,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
{"ts":1737174542314,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=53560,dl_prbs=71216,ul_prbs=1250,tx_pkts=87,tx_errors=0,tx_brate=5931936,rx_pkts=15,rx_errors=0,rx_brate=66504,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.245,ul_mcs=22.3235,ul_samples=34,dl_mcs=27.5051,dl_samples=196,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=50960,dl_prbs=72016,ul_prbs=1215,tx_pkts=91,tx_errors=2,tx_brate=6510328,rx_pkts=12,rx_errors=0,rx_brate=64992,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.482,ul_mcs=22.4444,ul_samples=18,dl_mcs=27.8737,dl_samples=198,imsi=1010123456789,} "}
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>53560</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>50960</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174542353,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737174542353,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
1737174542866 1/RMR [INFO] sends: ts=1737174542 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.109.183.143:38000 open=1 succ=5 fail=0 (hard=0 soft=0)
1737174542866 1/RMR [INFO] sends: ts=1737174542 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174542866 1/RMR [INFO] sends: ts=1737174542 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737174542866 1/RMR [INFO] sends: ts=1737174542 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174542866 1/RMR [INFO] sends: ts=1737174542 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
{"ts":1737174546952,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added ue 001010123456789"}
{"ts":1737174547431,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>5</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8E 00 01 00 00 46 20 01 17 0C 10 04 EC 01 74 01 
                                00 03 79 C8 70 01 14 01 00 03 01 28 B0 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 EF 00 D0 E0 17 00 06 
                                80 EF 00 2B 9D F5 01 2F 06 80 ED 00 DE 94 81 02 
                                00 E7 06 00 EB 30 0C C1 0C 00 00 47 20 01 18 B4 
                                10 04 EB 01 69 01 00 03 74 75 08 01 14 01 00 03 
                                01 5F 40 03 80 00 0F 00 00 03 80 01 0F 06 80 F0 
                                00 68 86 47 00 06 80 ED 00 AE A3 67 01 2F 06 80 
                                EF 00 37 BF 67 02 00 D6 06 00 EB 30 0C C1 15 4A 
                                00 01 50 10 08 00 F1 10 80 01 60 00 00 00 00 00 
                                60 07 20 CB 59 24 20 01 A5 48 03 00 16 00 01 00 
                                00 46 20 65 AC 92 10 D4 AC 00 00 47 20 65 AC 92 
                                10 D0 9C
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
{"ts":1737174547432,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71436</dl-PRBUsage>
                                                        <ul-PRBUsage>1260</ul-PRBUsage>
                                                        <tx-pkts>116</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>7981168</tx-brate>
                                                        <rx-pkts>20</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>75952</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.437675476074219</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.808509826660156</ul-mcs>
                                                        <ul-samples>47</ul-samples>
                                                        <dl-mcs>27.822511672973633</dl-mcs>
                                                        <dl-samples>231</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71860</dl-PRBUsage>
                                                        <ul-PRBUsage>1259</ul-PRBUsage>
                                                        <tx-pkts>105</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>7632136</tx-brate>
                                                        <rx-pkts>20</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>89920</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.524520874023438</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.82978630065918</ul-mcs>
                                                        <ul-samples>47</ul-samples>
                                                        <dl-mcs>27.873832702636719</dl-mcs>
                                                        <dl-samples>214</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>107848</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>54444</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>53404</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174547435,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174547435,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174547435,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=54444,dl_prbs=71436,ul_prbs=1260,tx_pkts=116,tx_errors=0,tx_brate=7981168,rx_pkts=20,rx_errors=0,rx_brate=75952,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.438,ul_mcs=21.8085,ul_samples=47,dl_mcs=27.8225,dl_samples=231,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=53404,dl_prbs=71860,ul_prbs=1259,tx_pkts=105,tx_errors=0,tx_brate=7632136,rx_pkts=20,rx_errors=0,rx_brate=89920,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.525,ul_mcs=21.8298,ul_samples=47,dl_mcs=27.8738,dl_samples=214,imsi=1010123456789,} "}
{"ts":1737174547450,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737174547450,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
{"ts":1737174551978,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added ue 001010123456780"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
{"ts":1737174552550,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>6</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                91 00 01 00 00 46 20 01 13 F0 10 05 34 02 00 80 
                                01 00 04 00 85 0C E8 01 13 01 00 03 01 65 F8 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D0 EF 71 
                                00 06 80 EF 00 2C 90 69 01 27 05 80 F1 0D F1 1B 
                                02 01 13 06 00 EB 30 0C C1 0C 00 00 47 20 01 19 
                                EC 10 04 F3 02 00 85 01 02 04 00 91 CF 38 01 15 
                                01 00 03 01 66 58 03 80 00 0F 00 00 03 80 01 0F 
                                06 80 EF 00 D1 08 D3 00 06 80 EE 00 58 A2 E9 01 
                                2C 06 80 EE 00 6F 5F 5F 02 00 FF 06 00 EB 30 0C 
                                C1 15 4A 00 01 50 10 08 00 F1 10 80 01 60 00 00 
                                00 00 00 60 07 20 CB 59 24 20 01 BA 68 03 00 16 
                                00 01 00 00 46 20 65 AC 92 10 DE 04 00 00 47 20 
                                65 AC 92 10 DC 64
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
{"ts":1737174552551,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70640</dl-PRBUsage>
                                                        <ul-PRBUsage>1332</ul-PRBUsage>
                                                        <tx-pkts>128</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>8719592</tx-brate>
                                                        <rx-pkts>19</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>91640</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.467658996582031</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.282051086425781</ul-mcs>
                                                        <ul-samples>39</ul-samples>
{"ts":1737174552553,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174552553,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174552553,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=56836,dl_prbs=70640,ul_prbs=1332,tx_pkts=128,tx_errors=0,tx_brate=8719592,rx_pkts=19,rx_errors=0,rx_brate=91640,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.468,ul_mcs=22.2821,ul_samples=39,dl_mcs=27.8836,dl_samples=275,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=56420,dl_prbs=72172,ul_prbs=1267,tx_pkts=133,tx_errors=2,tx_brate=9555768,rx_pkts=21,rx_errors=0,rx_brate=91736,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.517,ul_mcs=22.1591,ul_samples=44,dl_mcs=27.8431,dl_samples=255,imsi=1010123456789,} "}
                                                        <dl-mcs>27.883636474609375</dl-mcs>
                                                        <dl-samples>275</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>72172</dl-PRBUsage>
                                                        <ul-PRBUsage>1267</ul-PRBUsage>
                                                        <tx-pkts>133</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>9555768</tx-brate>
                                                        <rx-pkts>21</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>91736</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.517234802246094</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.159091949462891</ul-mcs>
                                                        <ul-samples>44</ul-samples>
                                                        <dl-mcs>27.843135833740234</dl-mcs>
                                                        <dl-samples>255</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>113256</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56836</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56420</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174552567,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737174552567,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceUeBindRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceUeBindRequest>
            <sliceName>fast</sliceName>
            <imsiList>
                <IMSI>30 30 31 30 31 30 31 32 33 34 35 36 37 38 39</IMSI>
            </imsiList>
        </sliceUeBindRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>8</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>0C</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>
                                18 18 66 61 73 74 00 3C 30 30 31 30 31 30 31 32 
                                33 34 35 36 37 38 39
                            </RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737174557006,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=795370825,requestor_id=864,instance_id=8,meid=enB_macro_001_001_0019b0) "}
{"ts":1737174557006,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound ue 001010123456789 to slice fast"}
{"ts":1737174557010,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>8</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                02 03 66 61 73 74 00 04 00 00 01 0D 31 30 31 30 
                                31 32 33 34 35 36 37 38 39 85 80 73 65 63 75 72 
                                65 5F 73 6C 69 63 65 00 00 01 00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737174557011,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                        <UeStatus>
                            <imsi>31 30 31 30 31 32 33 34 35 36 37 38 39</imsi>
                            <connected><true/></connected>
                        </UeStatus>
                    </ueList>
                </SliceStatus>
                <SliceStatus>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737174557011,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceUeBindRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceUeBindRequest>
            <sliceName>fast</sliceName>
            <imsiList>
                <IMSI>30 30 31 30 31 30 31 32 33 34 35 36 37 38 30</IMSI>
            </imsiList>
        </sliceUeBindRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>9</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>0C</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>
                                18 18 66 61 73 74 00 3C 30 30 31 30 31 30 31 32 
                                33 34 35 36 37 38 30
                            </RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737174557033,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-108320919,requestor_id=864,instance_id=9,meid=enB_macro_001_001_0019b0) "}
{"ts":1737174557033,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound ue 001010123456780 to slice fast"}
{"ts":1737174557038,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>864</ricRequestorID>
                                <ricInstanceID>9</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                02 03 66 61 73 74 00 04 00 00 02 0D 31 30 31 30 
                                31 32 33 34 35 36 37 38 39 86 80 31 30 31 30 31 
                                32 33 34 35 36 37 38 30 85 80 73 65 63 75 72 65 
                                5F 73 6C 69 63 65 00 00 01 00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737174557039,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737174557039,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                        <UeStatus>
                            <imsi>31 30 31 30 31 32 33 34 35 36 37 38 39</imsi>
                            <connected><true/></connected>
                        </UeStatus>
                        <UeStatus>
                            <imsi>31 30 31 30 31 32 33 34 35 36 37 38 30</imsi>
                            <connected><true/></connected>
                        </UeStatus>
                    </ueList>
                </SliceStatus>
                <SliceStatus>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737174557674,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>7</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                92 00 01 00 00 46 20 01 13 B4 10 05 7D 02 00 8F 
                                01 00 04 00 95 AC 18 01 1B 01 00 03 01 B5 98 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D0 8D 53 
                                00 06 80 EE 00 58 25 ED 01 36 06 80 EF 00 37 A1 
                                51 02 01 24 06 00 EB 30 0C C1 0C 00 00 47 20 01 
                                16 BC 10 04 DC 02 00 8B 01 01 04 00 98 05 58 01 
                                17 01 00 03 01 A8 E8 03 80 00 0F 00 00 03 80 01 
                                0F 06 80 EF 00 D1 0C 11 00 06 80 ED 00 B2 AA AB 
                                01 2A 06 80 ED 00 DE D7 7B 02 01 29 06 00 EB 30 
                                0C C1 15 3E 00 00 03 66 61 73 74 20 02 2A 70 10 
                                0A 59 02 01 1A 01 01 04 01 2D B1 70 01 32 01 00 
                                03 03 5E 80 03 80 00 0F 00 00 03 80 01 0F 00 00 
                                06 80 EE 00 58 BD A1 01 60 05 80 F2 06 F5 73 02 
                                02 4D 4A 00 01 50 10 08 00 F1 10 80 01 60 00 00 
                                00 00 00 60 07 20 C9 F5 F6 20 01 C8 D4 03 80 16 
                                00 01 00 00 46 20 64 49 64 10 E6 8C 00 00 47 20 
                                65 AC 92 10 E2 48 0F 00 00 03 66 61 73 74 20 C9 
                                F5 F6 20 01 C8 D4
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
{"ts":1737174557675,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70580</dl-PRBUsage>
                                                        <ul-PRBUsage>1405</ul-PRBUsage>
                                                        <tx-pkts>143</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>9808920</tx-brate>
                                                        <rx-pkts>27</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>112024</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.276023864746094</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.037036895751953</ul-mcs>
                                                        <ul-samples>54</ul-samples>
                                                        <dl-mcs>27.815071105957031</dl-mcs>
                                                        <dl-samples>292</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71356</dl-PRBUsage>
                                                        <ul-PRBUsage>1244</ul-PRBUsage>
                                                        <tx-pkts>139</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>9962840</tx-brate>
                                                        <rx-pkts>23</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>108776</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.523567199707031</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.333333969116211</ul-mcs>
                                                        <ul-samples>42</ul-samples>
                                                        <dl-mcs>27.855215072631836</dl-mcs>
                                                        <dl-samples>297</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>141936</dl-PRBUsage>
                                                        <ul-PRBUsage>2649</ul-PRBUsage>
                                                        <tx-pkts>282</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>19771760</tx-brate>
                                                        <rx-pkts>50</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>220800</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.185184478759766</ul-mcs>
                                                        <ul-samples>96</ul-samples>
                                                        <dl-mcs>27.83514404296875</dl-mcs>
                                                        <dl-samples>589</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13235702</pDCPBytesDL>
{"ts":1737174557678,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174557678,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174557679,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6572388,ul_bytes=59020,dl_prbs=70580,ul_prbs=1405,tx_pkts=143,tx_errors=0,tx_brate=9808920,rx_pkts=27,rx_errors=0,rx_brate=112024,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.276,ul_mcs=22.037,ul_samples=54,dl_mcs=27.8151,dl_samples=292,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=57928,dl_prbs=71356,ul_prbs=1244,tx_pkts=139,tx_errors=1,tx_brate=9962840,rx_pkts=23,rx_errors=0,rx_brate=108776,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.524,ul_mcs=22.3333,ul_samples=42,dl_mcs=27.8552,dl_samples=297,imsi=1010123456789,} slice[fast]={dl_bytes=13235702,ul_bytes=116948,dl_prbs=141936,ul_prbs=2649,tx_pkts=282,tx_errors=1,tx_brate=19771760,rx_pkts=50,rx_errors=0,rx_brate=220800,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.1852,ul_samples=96,dl_mcs=27.8351,dl_samples=589,} "}
                                                            <pDCPBytesUL>116948</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6572388</bytesDL>
                                                            <bytesUL>59020</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>57928</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13235702</bytesDL>
                                                            <bytesUL>116948</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174557725,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 7"}
{"ts":1737174557725,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 7"}
{"ts":1737174557737,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737174557742,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
<E2AP-PDU>
{"ts":1737174562791,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>8</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                85 00 01 00 00 46 20 01 16 C4 10 04 C8 01 10 01 
                                00 03 10 A1 C8 01 02 01 00 02 2B 60 03 80 00 0F 
                                00 00 03 80 01 0F 06 80 EF 00 D1 13 9B 00 03 80 
                                01 0B 01 04 04 80 FB 03 7D 01 20 06 00 EB 30 0C 
                                C1 0C 00 00 47 20 01 17 BC 10 05 57 01 0F 01 00 
                                03 10 A2 B8 01 02 01 00 02 23 90 03 80 00 0F 00 
                                00 03 80 01 0F 06 80 F0 00 68 87 BD 00 06 80 ED 
                                00 B4 CC CD 01 05 06 80 EF 00 37 8E 39 01 1B 06 
                                00 EB 30 0C C1 15 3B 00 00 03 66 61 73 74 20 02 
                                2E 80 10 0A 1F 01 1F 01 00 03 21 44 80 01 04 01 
                                00 02 4E F0 03 80 00 0F 00 00 03 80 01 0F 00 00 
                                06 80 EE 00 59 33 33 01 09 06 80 EE 00 6F 5E 39 
                                01 3B 4A 00 01 50 10 08 00 F1 10 80 01 60 00 00 
                                00 00 00 60 07 20 CA A9 20 20 01 C2 20 03 80 16 
                                00 01 00 00 46 20 64 FC 8E 10 DD D0 00 00 47 20 
                                65 AC 92 10 E4 50 0F 00 00 03 66 61 73 74 20 CA 
                                A9 20 20 01 C2 20
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
{"ts":1737174562792,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71364</dl-PRBUsage>
                                                        <ul-PRBUsage>1224</ul-PRBUsage>
                                                        <tx-pkts>16</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>1089992</tx-brate>
                                                        <rx-pkts>2</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>11104</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.538291931152344</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.0</ul-mcs>
                                                        <ul-samples>4</ul-samples>
                                                        <dl-mcs>27.90625</dl-mcs>
                                                        <dl-samples>32</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71612</dl-PRBUsage>
                                                        <ul-PRBUsage>1367</ul-PRBUsage>
                                                        <tx-pkts>15</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>1090232</tx-brate>
                                                        <rx-pkts>2</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>9104</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.530227661132812</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.600000381469727</ul-mcs>
                                                        <ul-samples>5</ul-samples>
                                                        <dl-mcs>27.777778625488281</dl-mcs>
                                                        <dl-samples>27</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142976</dl-PRBUsage>
                                                        <ul-PRBUsage>2591</ul-PRBUsage>
                                                        <tx-pkts>31</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2180224</tx-brate>
                                                        <rx-pkts>4</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>20208</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.299999237060547</ul-mcs>
                                                        <ul-samples>9</ul-samples>
                                                        <dl-mcs>27.842014312744141</dl-mcs>
                                                        <dl-samples>59</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13281568</pDCPBytesDL>
                                                            <pDCPBytesUL>115232</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6618254</bytesDL>
                                                            <bytesUL>56784</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>58448</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13281568</bytesDL>
                                                            <bytesUL>115232</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174562795,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174562795,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174562796,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6618254,ul_bytes=56784,dl_prbs=71364,ul_prbs=1224,tx_pkts=16,tx_errors=0,tx_brate=1089992,rx_pkts=2,rx_errors=0,rx_brate=11104,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.538,ul_mcs=22,ul_samples=4,dl_mcs=27.9062,dl_samples=32,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=58448,dl_prbs=71612,ul_prbs=1367,tx_pkts=15,tx_errors=0,tx_brate=1090232,rx_pkts=2,rx_errors=0,rx_brate=9104,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.53,ul_mcs=22.6,ul_samples=5,dl_mcs=27.7778,dl_samples=27,imsi=1010123456789,} slice[fast]={dl_bytes=13281568,ul_bytes=115232,dl_prbs=142976,ul_prbs=2591,tx_pkts=31,tx_errors=0,tx_brate=2180224,rx_pkts=4,rx_errors=0,rx_brate=20208,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.3,ul_samples=9,dl_mcs=27.842,dl_samples=59,} "}
{"ts":1737174562809,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 8"}
{"ts":1737174562809,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 8"}
{"ts":1737174562814,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737174562818,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
{"ts":1737174567912,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>9</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8A 00 01 00 00 46 20 01 16 50 10 04 E3 01 20 01 
                                00 03 21 46 00 01 04 01 00 02 47 20 03 80 00 0F 
                                00 00 03 80 01 0F 06 80 EF 00 D0 AC 83 00 06 80 
                                ED 00 B4 71 C7 01 09 06 80 EE 00 6F D0 BD 01 41 
                                06 00 EB 30 0C C1 0C 00 00 47 20 01 17 34 10 05 
                                3F 01 1F 01 01 03 21 46 30 01 05 01 00 02 66 58 
{"ts":1737174567913,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                                03 80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D1 12 
                                05 00 06 80 ED 00 B6 AA AB 01 0C 06 80 EE 00 6F 
                                72 37 01 41 06 00 EB 30 0C C1 15 3D 00 00 03 66 
                                61 73 74 20 02 2D 84 10 0A 22 01 3F 01 01 03 42 
                                8C 30 01 09 01 00 03 00 AD 78 03 80 00 0F 00 00 
                                03 80 01 0F 00 00 06 80 ED 00 B5 8E 39 01 15 06 
                                80 EF 00 37 D0 BD 02 00 82 4A 00 01 50 10 08 00 
                                F1 10 80 01 60 00 00 00 00 00 60 07 20 C9 45 F2 
                                20 01 BD 0C 03 80 16 00 01 00 00 46 20 65 AC 92 
                                10 D8 20 00 00 47 20 63 99 60 10 E4 EC 0F 00 00 
                                03 66 61 73 74 20 C9 45 F2 20 01 BD 0C
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71248</dl-PRBUsage>
                                                        <ul-PRBUsage>1251</ul-PRBUsage>
                                                        <tx-pkts>32</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2180608</tx-brate>
                                                        <rx-pkts>4</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>18208</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.336936950683594</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.55555534362793</ul-mcs>
                                                        <ul-samples>9</ul-samples>
                                                        <dl-mcs>27.953845977783203</dl-mcs>
                                                        <dl-samples>65</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71476</dl-PRBUsage>
                                                        <ul-PRBUsage>1343</ul-PRBUsage>
                                                        <tx-pkts>31</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>2180656</tx-brate>
                                                        <rx-pkts>5</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>26200</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.535194396972656</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.833333969116211</ul-mcs>
                                                        <ul-samples>12</ul-samples>
                                                        <dl-mcs>27.861537933349609</dl-mcs>
                                                        <dl-samples>65</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142724</dl-PRBUsage>
                                                        <ul-PRBUsage>2594</ul-PRBUsage>
                                                        <tx-pkts>63</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>4361264</tx-brate>
                                                        <rx-pkts>9</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>44408</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.69444465637207</ul-mcs>
                                                        <ul-samples>21</ul-samples>
                                                        <dl-mcs>27.907691955566406</dl-mcs>
                                                        <dl-samples>130</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>113932</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>55328</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>58604</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13190642</bytesDL>
                                                            <bytesUL>113932</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174567916,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174567916,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174567917,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=55328,dl_prbs=71248,ul_prbs=1251,tx_pkts=32,tx_errors=0,tx_brate=2180608,rx_pkts=4,rx_errors=0,rx_brate=18208,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.337,ul_mcs=22.5556,ul_samples=9,dl_mcs=27.9538,dl_samples=65,imsi=1010123456780,} ue[71]={dl_bytes=6527328,ul_bytes=58604,dl_prbs=71476,ul_prbs=1343,tx_pkts=31,tx_errors=1,tx_brate=2180656,rx_pkts=5,rx_errors=0,rx_brate=26200,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.535,ul_mcs=22.8333,ul_samples=12,dl_mcs=27.8615,dl_samples=65,imsi=1010123456789,} slice[fast]={dl_bytes=13190642,ul_bytes=113932,dl_prbs=142724,ul_prbs=2594,tx_pkts=63,tx_errors=1,tx_brate=4361264,rx_pkts=9,rx_errors=0,rx_brate=44408,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.6944,ul_samples=21,dl_mcs=27.9077,dl_samples=130,} "}
{"ts":1737174567931,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 9"}
{"ts":1737174567931,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 9"}
{"ts":1737174567936,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737174567940,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
<E2AP-PDU>
    <initiatingMessage>
{"ts":1737174573031,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>13</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>10</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                89 00 01 00 00 46 20 01 16 74 10 05 14 01 3B 01 
                                00 03 3E C2 40 01 09 01 00 03 00 C8 B8 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 F0 00 67 F3 5B 00 03 
                                80 01 0B 01 17 06 80 EE 00 6E ED B7 01 70 06 00 
                                EB 30 0C C1 0C 00 00 47 20 01 17 DC 10 05 4C 01 
                                2D 01 00 03 31 E8 E8 01 0A 01 00 03 00 E4 A0 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D0 FD 51 
                                00 06 80 EF 00 2C 8B A3 01 16 06 80 EE 00 6F 6D 
                                B7 01 62 06 00 EB 30 0C C1 15 3D 00 00 03 66 61 
                                73 74 20 02 2E 50 10 0A 60 01 68 01 00 03 70 AB 
                                28 01 13 01 00 03 01 AD 58 03 80 00 0F 00 00 03 
                                80 01 0F 00 00 06 80 EE 00 58 8B A3 01 2D 06 80 
                                EE 00 6F 2D B7 02 00 D2 4A 00 01 50 10 08 00 F1 
                                10 80 01 60 00 00 00 00 00 60 07 20 CB 59 24 20 
                                01 C4 F8 03 80 16 00 01 00 00 46 20 65 AC 92 10 
                                E2 48 00 00 47 20 65 AC 92 10 E2 B0 0F 00 00 03 
                                66 61 73 74 20 CB 59 24 20 01 C4 F8
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
{"ts":1737174573032,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71284</dl-PRBUsage>
                                                        <ul-PRBUsage>1300</ul-PRBUsage>
                                                        <tx-pkts>59</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>4112960</tx-brate>
                                                        <rx-pkts>9</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>51384</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>103.950607299804688</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.0</ul-mcs>
                                                        <ul-samples>23</ul-samples>
                                                        <dl-mcs>27.732143402099609</dl-mcs>
                                                        <dl-samples>112</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71644</dl-PRBUsage>
                                                        <ul-PRBUsage>1356</ul-PRBUsage>
                                                        <tx-pkts>45</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>3270888</tx-brate>
                                                        <rx-pkts>10</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>58528</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.494758605957031</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.272727966308594</ul-mcs>
                                                        <ul-samples>22</ul-samples>
                                                        <dl-mcs>27.857143402099609</dl-mcs>
                                                        <dl-samples>98</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142928</dl-PRBUsage>
                                                        <ul-PRBUsage>2656</ul-PRBUsage>
                                                        <tx-pkts>104</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>7383848</tx-brate>
                                                        <rx-pkts>19</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>109912</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.136363983154297</ul-mcs>
                                                        <ul-samples>45</ul-samples>
                                                        <dl-mcs>27.794643402099609</dl-mcs>
                                                        <dl-samples>210</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>115960</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>57928</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>58032</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>115960</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737174573036,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737174573036,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737174573036,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=57928,dl_prbs=71284,ul_prbs=1300,tx_pkts=59,tx_errors=0,tx_brate=4112960,rx_pkts=9,rx_errors=0,rx_brate=51384,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=103.951,ul_mcs=22,ul_samples=23,dl_mcs=27.7321,dl_samples=112,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=58032,dl_prbs=71644,ul_prbs=1356,tx_pkts=45,tx_errors=0,tx_brate=3270888,rx_pkts=10,rx_errors=0,rx_brate=58528,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.495,ul_mcs=22.2727,ul_samples=22,dl_mcs=27.8571,dl_samples=98,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=115960,dl_prbs=142928,ul_prbs=2656,tx_pkts=104,tx_errors=0,tx_brate=7383848,rx_pkts=19,rx_errors=0,rx_brate=109912,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.1364,ul_samples=45,dl_mcs=27.7946,dl_samples=210,} "}
{"ts":1737174573074,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 10"}
{"ts":1737174573074,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 10"}
-- FETCHING DATA FROM INFLUXDB --
Starting initial training phase (1 hour + 30 minutes)...
Data normalized with Min-Max Scaling. Min: [15.  0. 15.], Max: [143.   2.  15.]
Data array shape before reshaping: (20, 3)
Data array dtype: float32
Reshaped data array shape: (2, 10, 3)
Sample data (first sequence):
[[0.125     0.        0.       ]
 [0.171875  0.        0.       ]
 [0.3671875 0.        0.       ]
 [0.25      1.        0.       ]
 [0.5078125 0.        0.       ]
 [0.4765625 0.5       0.       ]
 [0.5625    0.        0.       ]
 [0.59375   1.        0.       ]
 [0.7890625 0.        0.       ]
 [0.703125  0.        0.       ]]
inside the try -------
Data tensor created with shape: torch.Size([2, 10, 3])
labels: tensor([0., 0.])
Training the model
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2202
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2190
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2178
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2166
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2154
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2142
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2130
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2118
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2107
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2095
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2083
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2071
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2058
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2046
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2033
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2019
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.2005
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1990
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1975
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1958
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1940
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1920
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1899
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1876
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1852
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1827
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1803
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1781
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1764
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1741
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1733
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1725
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1718
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1709
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1665
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1652
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1639
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1625
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1611
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1598
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1585
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1573
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1562
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1553
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1544
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1537
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1530
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1523
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1517
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
1737174573671 1/RMR [INFO] sends: ts=1737174573 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.109.183.143:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737174573671 1/RMR [INFO] sends: ts=1737174573 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174573671 1/RMR [INFO] sends: ts=1737174573 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737174573671 1/RMR [INFO] sends: ts=1737174573 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174573671 1/RMR [INFO] sends: ts=1737174573 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
Training completed for current batch. Loss: 0.1511
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1504
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1498
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1492
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1485
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1479
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1472
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1465
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1458
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1451
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1444
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1437
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1430
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1424
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1418
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1412
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1406
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1400
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1395
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1390
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1385
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1379
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1374
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1369
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1364
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1359
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1354
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1349
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1344
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1339
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1335
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1330
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1326
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1321
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1317
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1312
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1308
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1303
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1299
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1294
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1290
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1286
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1282
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1278
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1273
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1269
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1265
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1261
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1257
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1253
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1249
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1245
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1241
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1237
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1233
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1229
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1225
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1221
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1217
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1213
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1209
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1205
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1201
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1197
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1193
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1189
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1186
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1182
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1178
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1174
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1170
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1166
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1163
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1159
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1155
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1151
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1148
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1144
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1140
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1136
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1133
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1129
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1125
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1122
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1118
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1114
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1111
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1107
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1103
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1100
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1096
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1093
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1089
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1085
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1082
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1078
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1075
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1071
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1068
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1064
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1060
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1057
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1053
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1050
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1046
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1043
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1039
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1036
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1032
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1029
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1026
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1022
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1019
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1015
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1012
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1008
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1005
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.1002
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0998
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0995
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0992
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0988
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0985
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0982
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0979
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0975
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0972
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0969
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0966
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0962
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0959
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0956
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0953
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0950
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0947
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0944
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0941
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0937
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0934
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0931
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0928
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0925
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0922
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0920
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0917
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0914
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0911
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0908
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0905
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0902
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0900
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0897
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0894
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0891
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0889
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0886
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0883
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0881
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0878
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0876
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0873
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0870
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0868
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0866
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0863
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0861
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0858
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0856
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0854
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0851
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0849
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0847
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0845
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0843
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0841
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0838
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0836
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0834
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0832
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0830
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0829
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0827
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0825
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0823
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0821
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0819
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0818
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0816
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0814
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0813
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0811
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0810
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0808
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0807
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0805
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0804
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0802
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0801
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0800
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0798
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0797
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0796
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0795
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0793
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0792
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0791
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0790
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0789
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0788
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0787
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0786
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0785
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0784
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0783
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0782
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0781
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0781
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0780
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0779
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0778
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0778
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0777
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0776
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0776
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0775
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0774
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0774
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0773
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0772
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0772
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0771
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0771
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0770
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0770
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0769
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0769
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0769
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0768
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0768
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0767
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0767
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0767
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0766
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0766
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0765
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0765
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0765
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0765
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0764
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0764
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0764
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0763
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0763
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0763
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0763
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0762
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0762
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0762
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0762
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0762
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0761
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0761
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0761
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0761
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0761
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0757
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0751
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0748
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0748
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0748
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0748
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0748
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0747
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0747
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0747
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0747
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0746
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0746
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0745
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0745
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0744
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0743
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0742
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0741
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0740
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0739
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0737
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0735
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0734
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0732
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0730
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0729
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0728
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0726
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0725
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0724
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0723
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0722
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0722
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0721
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0720
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0719
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0719
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0718
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0717
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0717
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0716
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0715
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0715
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0714
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0714
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0713
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0713
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0712
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0712
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0711
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0711
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0710
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0710
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0710
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0709
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0709
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0708
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0708
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0708
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0707
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0707
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0707
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0706
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0706
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0706
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0706
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([2, 10, 3])
Input x shape: torch.Size([2, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([2, 64])
Shape of latent: torch.Size([2, 32])
Shape of decoded hidden state: torch.Size([1, 2, 3])
Shape of decoded cell state: torch.Size([1, 2, 3])
Shape of decoder_input: torch.Size([2, 10, 64])
Shape of reconstructed output: torch.Size([2, 10, 3])
Reconstructed data shape: torch.Size([2, 10, 3])
Training completed for current batch. Loss: 0.0676
Initial training completed. Switching to evaluation mode...
Fetching new data for anomaly detection from 2025-01-18 04:59:33.075121 to present...
No new data available. Waiting for the next fetch interval...
Fetching new data for anomaly detection from 2025-01-18 04:29:49.001973 to present...
No new data available. Waiting for the next fetch interval...
1737174604674 1/RMR [INFO] sends: ts=1737174604 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.109.183.143:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737174604674 1/RMR [INFO] sends: ts=1737174604 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174604674 1/RMR [INFO] sends: ts=1737174604 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737174604674 1/RMR [INFO] sends: ts=1737174604 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174604674 1/RMR [INFO] sends: ts=1737174604 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
Fetching new data for anomaly detection from 2025-01-18 04:29:59.013356 to present...
No new data available. Waiting for the next fetch interval...
Fetching new data for anomaly detection from 2025-01-18 04:30:09.025369 to present...
No new data available. Waiting for the next fetch interval...
Fetching new data for anomaly detection from 2025-01-18 04:30:19.041313 to present...
No new data available. Waiting for the next fetch interval...
1737174635678 1/RMR [INFO] sends: ts=1737174635 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.109.183.143:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737174635678 1/RMR [INFO] sends: ts=1737174635 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174635678 1/RMR [INFO] sends: ts=1737174635 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737174635678 1/RMR [INFO] sends: ts=1737174635 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737174635678 1/RMR [INFO] sends: ts=1737174635 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
Fetching new data for anomaly detection from 2025-01-18 04:30:29.053403 to present...
No new data available. Waiting for the next fetch interval...
