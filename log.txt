1737229021073 1/RMR [INFO] ric message routing library on SI95 p=4560 mv=3 flg=00 id=a (f447e29 4.9.4 built: Dec 13 2023)
{"ts":1737229021073,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"Creating app and attaching to RMR"}
{"ts":1737229022074,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"Starting app"}
{"ts":1737229022074,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"initialized northbound interface (0.0.0.0:8000"}
{"ts":1737229022074,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"started northbound interface"}
1737229022077 1/RMR [INFO] sends: ts=1737229022 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
Module loaded
1737229053081 1/RMR [INFO] sends: ts=1737229053 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
unable to retrieve container logs for docker://e86eeed24472444be852ce64f7a0e86b39818275d715e1a4278784fe526346d91737229021073 1/RMR [INFO] ric message routing library on SI95 p=4560 mv=3 flg=00 id=a (f447e29 4.9.4 built: Dec 13 2023)
{"ts":1737229021073,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"Creating app and attaching to RMR"}
{"ts":1737229022074,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"Starting app"}
{"ts":1737229022074,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"initialized northbound interface (0.0.0.0:8000"}
{"ts":1737229022074,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"started northbound interface"}
1737229022077 1/RMR [INFO] sends: ts=1737229022 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
Module loaded
1737229053081 1/RMR [INFO] sends: ts=1737229053 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229084742 1/RMR [INFO] sends: ts=1737229084 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229084742 1/RMR [INFO] sends: ts=1737229084 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229084742 1/RMR [INFO] sends: ts=1737229084 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229084742 1/RMR [INFO] sends: ts=1737229084 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229084742 1/RMR [INFO] sends: ts=1737229084 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceStatusRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceStatusRequest>
            <sliceNameList>
            </sliceNameList>
        </sliceStatusRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>1</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>08</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>10 00</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229100328,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-1745384147,requestor_id=24813,instance_id=1,meid=enB_macro_001_001_0019b0) "}
<E2SM-KPM-EventTriggerDefinition>
    <eventDefinition-Format1>
        <policyTest-List>
            <Trigger-ConditionIE-Item>
                <report-Period-IE><ms5120/></report-Period-IE>
            </Trigger-ConditionIE-Item>
        </policyTest-List>
    </eventDefinition-Format1>
</E2SM-KPM-EventTriggerDefinition>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>8</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICsubscriptionRequest>
                <protocolIEs>
                    <RICsubscriptionRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>2</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>30</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICsubscriptionDetails>
                                <ricEventTriggerDefinition>20 48</ricEventTriggerDefinition>
                                <ricAction-ToBeSetup-List>
                                    <ProtocolIE-SingleContainer>
                                        <id>19</id>
                                        <criticality><reject/></criticality>
                                        <value>
                                            <RICaction-ToBeSetup-Item>
                                                <ricActionID>1</ricActionID>
                                                <ricActionType><report/></ricActionType>
                                            </RICaction-ToBeSetup-Item>
                                        </value>
                                    </ProtocolIE-SingleContainer>
                                </ricAction-ToBeSetup-List>
                            </RICsubscriptionDetails>
                        </value>
                    </RICsubscriptionRequest-IEs>
                </protocolIEs>
            </RICsubscriptionRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229100330,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent subscription request (xid=24813.2,requestor_id=24813,instance_id=2,meid=enB_macro_001_001_0019b0) "}
<E2SM-Zylinium-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><maskStatusRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-Zylinium-ControlHeader>
<E2SM-Zylinium-ControlMessage>
    <controlMessageFormat1>
        <maskStatusRequest>
        </maskStatusRequest>
    </controlMessageFormat1>
</E2SM-Zylinium-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>10</RICcontrolHeader>
{"ts":1737229100331,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-694756493,requestor_id=24813,instance_id=3,meid=enB_macro_001_001_0019b0) "}
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>20</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-Zylinium-EventTriggerDefinition>
    <ranEventDefinition>
    </ranEventDefinition>
</E2SM-Zylinium-EventTriggerDefinition>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>8</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICsubscriptionRequest>
                <protocolIEs>
                    <RICsubscriptionRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>4</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICsubscriptionRequest-IEs>
                    <RICsubscriptionRequest-IEs>
                        <id>30</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICsubscriptionDetails>
                                <ricEventTriggerDefinition>00</ricEventTriggerDefinition>
                                <ricAction-ToBeSetup-List>
                                    <ProtocolIE-SingleContainer>
                                        <id>19</id>
                                        <criticality><reject/></criticality>
                                        <value>
                                            <RICaction-ToBeSetup-Item>
                                                <ricActionID>1</ricActionID>
                                                <ricActionType><report/></ricActionType>
                                            </RICaction-ToBeSetup-Item>
                                        </value>
                                    </ProtocolIE-SingleContainer>
                                </ricAction-ToBeSetup-List>
                            </RICsubscriptionDetails>
                        </value>
                    </RICsubscriptionRequest-IEs>
                </protocolIEs>
            </RICsubscriptionRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-Zylinium-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><maskConfigRequest/></controlMessageId>
    </controlHeaderFormat1>
{"ts":1737229100332,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent subscription request (xid=24813.4,requestor_id=24813,instance_id=4,meid=enB_macro_001_001_0019b0) "}
</E2SM-Zylinium-ControlHeader>
<E2SM-Zylinium-ControlMessage>
    <controlMessageFormat1>
        <maskConfigRequest>
            <dlDefault>0x0</dlDefault>
            <ulDefault>0x0</ulDefault>
            <dlSched>
            </dlSched>
{"ts":1737229100333,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=997649839,requestor_id=24813,instance_id=5,meid=enB_macro_001_001_0019b0) "}
{"ts":1737229100333,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added nodeb enB_macro_001_001_0019b0"}
            <ulSched>
            </ulSched>
        </maskConfigRequest>
    </controlMessageFormat1>
</E2SM-Zylinium-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>5</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>00</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>00 00 02 30 78 30 00 02 30 78 30 00 00 00 00</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229100334,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
{"ts":1737229100335,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737229100335,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>1</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>00</RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737229100374,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
{"ts":1737229100375,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737229100375,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                00 00 02 30 78 30 00 00 01 00 00 00 02 30 78 30 
                                00 00 01 00 00 02 30 78 30 00 02 30 78 30 00 00 
                                00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-Zylinium-ControlOutcome>
    <controlOutcomeFormat1>
        <maskStatusReport>
            <dlMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </dlMask>
            <ulMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </ulMask>
            <dlDefault>0x0</dlDefault>
            <ulDefault>0x0</ulDefault>
            <dlSched>
            </dlSched>
            <ulSched>
            </ulSched>
        </maskStatusReport>
    </controlOutcomeFormat1>
</E2SM-Zylinium-ControlOutcome>
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>5</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                00 00 02 30 78 30 00 00 01 00 00 00 02 30 78 30 
                                00 00 01 00 00 02 30 78 30 00 02 30 78 30 00 00 
                                00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-Zylinium-ControlOutcome>
    <controlOutcomeFormat1>
        <maskStatusReport>
            <dlMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </dlMask>
            <ulMask>
                <mask>0x0</mask>
                <start>0</start>
                <end>0</end>
                <id>0</id>
            </ulMask>
            <dlDefault>0x0</dlDefault>
            <ulDefault>0x0</ulDefault>
            <dlSched>
            </dlSched>
            <ulSched>
            </ulSched>
        </maskStatusReport>
    </controlOutcomeFormat1>
</E2SM-Zylinium-ControlOutcome>
{"ts":1737229100378,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
{"ts":1737229100379,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737229100379,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>8</procedureCode>
        <criticality><ignore/></criticality>
        <value>
            <RICsubscriptionResponse>
                <protocolIEs>
                    <RICsubscriptionResponse-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>4</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
{"ts":1737229100384,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12011, source enB_macro_001_001_0019b0)"}
{"ts":1737229100385,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICsubscription (8) "}
{"ts":1737229100385,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"subscription request succeeded (xid=24813.4,subid=4) "}
{"ts":1737229100385,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran SubscriptionResponse handler"}
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>2</RANfunctionID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>17</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICaction-Admitted-List>
                                <ProtocolIE-SingleContainer>
                                    <id>14</id>
                                    <criticality><reject/></criticality>
                                    <value>
                                        <RICaction-Admitted-Item>
                                            <ricActionID>1</ricActionID>
                                        </RICaction-Admitted-Item>
                                    </value>
                                </ProtocolIE-SingleContainer>
                            </RICaction-Admitted-List>
                        </value>
                    </RICsubscriptionResponse-IEs>
                </protocolIEs>
            </RICsubscriptionResponse>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737229102341,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12011, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>8</procedureCode>
        <criticality><ignore/></criticality>
        <value>
            <RICsubscriptionResponse>
                <protocolIEs>
                    <RICsubscriptionResponse-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICsubscriptionResponse-IEs>
                    <RICsubscriptionResponse-IEs>
                        <id>17</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICaction-Admitted-List>
                                <ProtocolIE-SingleContainer>
                                    <id>14</id>
                                    <criticality><reject/></criticality>
                                    <value>
                                        <RICaction-Admitted-Item>
                                            <ricActionID>1</ricActionID>
                                        </RICaction-Admitted-Item>
{"ts":1737229102342,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICsubscription (8) "}
{"ts":1737229102342,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"subscription request succeeded (xid=24813.2,subid=3) "}
{"ts":1737229102342,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran SubscriptionResponse handler"}
                                    </value>
                                </ProtocolIE-SingleContainer>
                            </RICaction-Admitted-List>
                        </value>
                    </RICsubscriptionResponse-IEs>
                </protocolIEs>
            </RICsubscriptionResponse>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737229105360,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added slice fast"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
{"ts":1737229107466,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>1</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                87 00 01 00 00 46 20 0C 45 24 10 3A F4 01 23 01 
                                00 03 24 B4 38 01 06 01 00 02 62 E0 03 80 00 0F 
                                00 00 03 80 01 0F 06 80 EF 00 D0 F9 75 00 06 80 
                                ED 00 B0 92 49 01 0E 06 80 ED 00 DE 43 DB 01 53 
                                06 00 EB 30 0C C1 0C 00 00 47 20 0C 0F BC 10 38 
                                D4 01 28 01 00 03 2C A5 C0 01 04 01 00 02 4B B0 
                                03 80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D1 0C 
                                B5 00 03 80 01 0B 01 08 06 80 EE 00 6F 8E 39 01 
                                51 06 00 EB 30 0C C1 15 4A 00 01 50 10 08 00 F1 
                                10 80 01 60 00 10 01 EC 00 00 60 07 30 08 D8 38 
                                EC 20 13 1C 76 03 00 1A 00 01 00 00 46 30 04 7C 
                                B6 FC 20 09 EC 2D 00 00 47 30 04 5B 83 DC 20 09 
                                30 49
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
{"ts":1737229107467,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>804132</dl-PRBUsage>
                                                        <ul-PRBUsage>15092</ul-PRBUsage>
                                                        <tx-pkts>35</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2405432</tx-brate>
                                                        <rx-pkts>6</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>25312</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.487220764160156</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.071428298950195</ul-mcs>
                                                        <ul-samples>14</ul-samples>
                                                        <dl-mcs>27.783132553100586</dl-mcs>
                                                        <dl-samples>83</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>790460</dl-PRBUsage>
                                                        <ul-PRBUsage>14548</ul-PRBUsage>
                                                        <tx-pkts>40</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2926016</tx-brate>
                                                        <rx-pkts>4</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>19376</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.524818420410156</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.0</ul-mcs>
                                                        <ul-samples>8</ul-samples>
                                                        <dl-mcs>27.888889312744141</dl-mcs>
                                                        <dl-samples>81</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>492</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>148388076</pDCPBytesDL>
                                                            <pDCPBytesUL>1252470</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>75282172</bytesDL>
                                                            <bytesUL>650285</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>73106396</bytesDL>
                                                            <bytesUL>602185</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229107470,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229107470,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229107471,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=75282172,ul_bytes=650285,dl_prbs=804132,ul_prbs=15092,tx_pkts=35,tx_errors=0,tx_brate=2405432,rx_pkts=6,rx_errors=0,rx_brate=25312,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.487,ul_mcs=22.0714,ul_samples=14,dl_mcs=27.7831,dl_samples=83,imsi=1010123456780,} ue[71]={dl_bytes=73106396,ul_bytes=602185,dl_prbs=790460,ul_prbs=14548,tx_pkts=40,tx_errors=0,tx_brate=2926016,rx_pkts=4,rx_errors=0,rx_brate=19376,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.525,ul_mcs=22,ul_samples=8,dl_mcs=27.8889,dl_samples=81,imsi=1010123456789,} "}
{"ts":1737229107609,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737229107609,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] "}
{"ts":1737229110393,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added slice secure_slice"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>2</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8B 00 01 00 00 46 20 01 14 8C 10 05 36 01 30 01 
                                00 03 31 E3 20 01 0F 01 00 03 00 E1 18 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 F1 00 34 42 87 00 06 
                                80 ED 00 A9 BD 37 01 17 06 80 ED 00 DE 72 55 01 
                                67 06 00 EB 30 0C C1 0C 00 00 47 20 01 18 10 10 
                                04 AE 01 34 01 01 03 38 99 38 01 06 01 00 02 6F 
                                40 03 80 00 0F 00 00 03 80 01 0F 06 80 F1 00 34 
                                42 DD 00 06 80 ED 00 B1 55 55 01 0C 06 80 ED 00 
                                DE F4 DF 01 73 06 00 EB 30 0C C1 15 4A 00 01 50 
                                10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 20 
                                CB 59 24 20 01 A9 8C 03 00 16 00 01 00 00 46 20 
                                65 AC 92 10 DE A0 00 00 47 20 65 AC 92 10 CA EC
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70796</dl-PRBUsage>
                                                        <ul-PRBUsage>1334</ul-PRBUsage>
                                                        <tx-pkts>48</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>3269408</tx-brate>
                                                        <rx-pkts>15</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>57624</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
{"ts":1737229112585,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
{"ts":1737229112586,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.519744873046875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.217390060424805</ul-mcs>
                                                        <ul-samples>23</ul-samples>
                                                        <dl-mcs>27.805826187133789</dl-mcs>
                                                        <dl-samples>103</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71696</dl-PRBUsage>
                                                        <ul-PRBUsage>1198</ul-PRBUsage>
                                                        <tx-pkts>52</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>3709240</tx-brate>
                                                        <rx-pkts>6</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>28480</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.522369384765625</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.166666030883789</ul-mcs>
                                                        <ul-samples>12</ul-samples>
                                                        <dl-mcs>27.869565963745117</dl-mcs>
                                                        <dl-samples>115</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>108940</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56992</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>51948</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
{"ts":1737229112590,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229112590,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229112590,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=56992,dl_prbs=70796,ul_prbs=1334,tx_pkts=48,tx_errors=0,tx_brate=3269408,rx_pkts=15,rx_errors=0,rx_brate=57624,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.52,ul_mcs=21.2174,ul_samples=23,dl_mcs=27.8058,dl_samples=103,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=51948,dl_prbs=71696,ul_prbs=1198,tx_pkts=52,tx_errors=1,tx_brate=3709240,rx_pkts=6,rx_errors=0,rx_brate=28480,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.522,ul_mcs=22.1667,ul_samples=12,dl_mcs=27.8696,dl_samples=115,imsi=1010123456789,} "}
{"ts":1737229112604,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737229112604,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
1737229115381 1/RMR [INFO] sends: ts=1737229115 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=3 fail=0 (hard=0 soft=0)
1737229115381 1/RMR [INFO] sends: ts=1737229115 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229115381 1/RMR [INFO] sends: ts=1737229115 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229115381 1/RMR [INFO] sends: ts=1737229115 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229115381 1/RMR [INFO] sends: ts=1737229115 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceConfigRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceConfigRequest>
            <sliceConfigList>
                <SliceConfig>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                </SliceConfig>
            </sliceConfigList>
        </sliceConfigRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>6</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>00</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>00 00 C0 66 61 73 74 00 04 00</RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229115427,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-1986564143,requestor_id=24813,instance_id=6,meid=enB_macro_001_001_0019b0) "}
{"ts":1737229115427,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound slice fast to nodeb enB_macro_001_001_0019b0"}
{"ts":1737229115435,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
{"ts":1737229115436,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737229115436,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>6</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>01 03 66 61 73 74 00 04 00 00 00</RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>3</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8E 00 01 00 00 46 20 01 15 14 10 05 13 01 4A 01 
                                00 03 4C 3E 10 01 0E 01 00 03 00 FC C0 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 EF 00 D0 DF 2F 00 06 
                                80 ED 00 B0 84 21 01 1F 06 80 ED 00 DE 48 0F 02 
                                00 87 06 00 EB 30 0C C1 0C 00 00 47 20 01 17 28 
                                10 04 F3 01 3F 01 02 03 43 25 60 01 0E 01 00 03 
                                00 E7 A0 03 80 00 0F 00 00 03 80 01 0F 06 80 EF 
                                00 D1 0D 31 00 06 80 ED 00 B3 33 33 01 1E 06 80 
                                ED 00 DE 76 27 02 00 82 06 00 EB 30 0C C1 15 4A 
                                00 01 50 10 08 00 F1 10 80 01 60 00 00 00 00 00 
                                60 07 20 C9 45 F2 20 01 B1 AC 03 00 16 00 01 00 
                                00 46 20 63 99 60 10 DF 08 00 00 47 20 65 AC 92 
{"ts":1737229117704,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
                                10 D2 A4
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229117705,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70932</dl-PRBUsage>
                                                        <ul-PRBUsage>1299</ul-PRBUsage>
                                                        <tx-pkts>74</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>4996624</tx-brate>
                                                        <rx-pkts>14</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>64704</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.435905456542969</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.064516067504883</ul-mcs>
                                                        <ul-samples>31</ul-samples>
                                                        <dl-mcs>27.785184860229492</dl-mcs>
                                                        <dl-samples>135</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71464</dl-PRBUsage>
                                                        <ul-PRBUsage>1267</ul-PRBUsage>
                                                        <tx-pkts>63</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>4400480</tx-brate>
                                                        <rx-pkts>14</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>59296</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.525764465332031</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.399999618530273</ul-mcs>
                                                        <ul-samples>30</ul-samples>
                                                        <dl-mcs>27.80769157409668</dl-mcs>
                                                        <dl-samples>130</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>111020</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>57096</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>53924</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
{"ts":1737229117708,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229117708,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229117708,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6527328,ul_bytes=57096,dl_prbs=70932,ul_prbs=1299,tx_pkts=74,tx_errors=0,tx_brate=4996624,rx_pkts=14,rx_errors=0,rx_brate=64704,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.436,ul_mcs=22.0645,ul_samples=31,dl_mcs=27.7852,dl_samples=135,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=53924,dl_prbs=71464,ul_prbs=1267,tx_pkts=63,tx_errors=2,tx_brate=4400480,rx_pkts=14,rx_errors=0,rx_brate=59296,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.526,ul_mcs=22.4,ul_samples=30,dl_mcs=27.8077,dl_samples=130,imsi=1010123456789,} "}
{"ts":1737229117747,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737229117748,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceConfigRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceConfigRequest>
            <sliceConfigList>
                <SliceConfig>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                </SliceConfig>
            </sliceConfigList>
        </sliceConfigRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>7</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>00</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>
                                00 02 C0 73 65 63 75 72 65 5F 73 6C 69 63 65 00 
                                00 01
                            </RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229120452,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-1426590804,requestor_id=24813,instance_id=7,meid=enB_macro_001_001_0019b0) "}
{"ts":1737229120452,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound slice secure_slice to nodeb enB_macro_001_001_0019b0"}
{"ts":1737229120457,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>7</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                02 03 66 61 73 74 00 04 00 00 00 0B 73 65 63 75 
                                72 65 5F 73 6C 69 63 65 00 00 01 00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
{"ts":1737229120458,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
                <SliceStatus>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737229120458,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2AP-PDU>
    <initiatingMessage>
{"ts":1737229122825,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>4</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                89 00 01 00 00 46 20 01 16 34 10 05 0F 01 60 01 
                                00 03 63 C3 F8 01 0D 01 00 03 00 E3 18 03 80 00 
                                0F 00 00 03 80 01 0F 05 80 F2 1A 19 8B 00 03 80 
                                01 0B 01 22 06 80 ED 00 DE 77 61 02 00 C1 06 00 
                                EB 30 0C C1 0C 00 00 47 20 01 17 A4 10 04 ED 01 
                                59 01 02 03 60 5D 00 01 14 01 00 03 01 0C D0 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 F0 00 68 68 B5 
                                00 06 80 ED 00 AD C4 77 01 2B 05 80 F0 1B CF 3D 
                                02 00 A8 06 00 EB 30 0C C1 15 4A 00 01 50 10 08 
                                00 F1 10 80 01 60 00 00 00 00 00 60 07 20 C9 45 
                                F2 20 01 A3 40 03 00 16 00 01 00 00 46 20 65 AC 
                                92 10 DD 00 00 00 47 20 63 99 60 10 C6 40
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229122826,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71220</dl-PRBUsage>
                                                        <ul-PRBUsage>1295</ul-PRBUsage>
                                                        <tx-pkts>96</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>6538232</tx-brate>
                                                        <rx-pkts>13</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>58136</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.39910888671875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.0</ul-mcs>
                                                        <ul-samples>34</ul-samples>
                                                        <dl-mcs>27.808290481567383</dl-mcs>
                                                        <dl-samples>193</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71588</dl-PRBUsage>
                                                        <ul-PRBUsage>1261</ul-PRBUsage>
                                                        <tx-pkts>89</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>6315264</tx-brate>
                                                        <rx-pkts>20</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>68816</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.409011840820312</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.720930099487305</ul-mcs>
                                                        <ul-samples>43</ul-samples>
                                                        <dl-mcs>27.809524536132812</dl-mcs>
                                                        <dl-samples>168</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>107328</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
{"ts":1737229122829,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229122829,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56576</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>50752</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229122829,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=56576,dl_prbs=71220,ul_prbs=1295,tx_pkts=96,tx_errors=0,tx_brate=6538232,rx_pkts=13,rx_errors=0,rx_brate=58136,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.399,ul_mcs=22,ul_samples=34,dl_mcs=27.8083,dl_samples=193,imsi=1010123456780,} ue[71]={dl_bytes=6527328,ul_bytes=50752,dl_prbs=71588,ul_prbs=1261,tx_pkts=89,tx_errors=2,tx_brate=6315264,rx_pkts=20,rx_errors=0,rx_brate=68816,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.409,ul_mcs=21.7209,ul_samples=43,dl_mcs=27.8095,dl_samples=168,imsi=1010123456789,} "}
{"ts":1737229122842,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737229122842,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
{"ts":1737229125479,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added ue 001010123456789"}
{"ts":1737229127948,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>5</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8C 00 01 00 00 46 20 01 16 14 10 05 40 01 6C 01 
                                00 03 70 C8 90 01 15 01 00 03 01 61 E8 03 80 00 
                                0F 00 00 03 80 01 0F 05 80 F2 1A 1E 6F 00 05 80 
                                F1 0B 1C 19 01 29 06 80 ED 00 DE 4D 07 02 00 E2 
                                06 00 EB 30 0C C1 0C 00 00 47 20 01 19 00 10 04 
                                EA 01 69 01 00 03 74 78 08 01 14 01 00 03 01 29 
                                B0 03 80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D0 
                                E4 77 00 06 80 ED 00 B0 B4 B5 01 22 06 80 EE 00 
                                6F 9B FB 02 00 D7 06 00 EB 30 0C C1 15 4A 00 01 
                                50 10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 
                                20 CB 59 24 20 01 A3 DC 03 00 16 00 01 00 00 46 
                                20 65 AC 92 10 D9 C0 00 00 47 20 65 AC 92 10 CA 
                                1C
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
{"ts":1737229127950,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71188</dl-PRBUsage>
                                                        <ul-PRBUsage>1344</ul-PRBUsage>
                                                        <tx-pkts>108</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>7391376</tx-brate>
                                                        <rx-pkts>21</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>90600</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.47552490234375</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.219512939453125</ul-mcs>
                                                        <ul-samples>41</ul-samples>
                                                        <dl-mcs>27.78761100769043</dl-mcs>
                                                        <dl-samples>226</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71936</dl-PRBUsage>
                                                        <ul-PRBUsage>1258</ul-PRBUsage>
                                                        <tx-pkts>105</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>7632904</tx-brate>
                                                        <rx-pkts>20</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>76208</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.446220397949219</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.088235855102539</ul-mcs>
                                                        <ul-samples>34</ul-samples>
                                                        <dl-mcs>27.902324676513672</dl-mcs>
                                                        <dl-samples>215</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>107484</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>55744</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>51740</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
{"ts":1737229127952,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229127952,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229127952,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=55744,dl_prbs=71188,ul_prbs=1344,tx_pkts=108,tx_errors=0,tx_brate=7391376,rx_pkts=21,rx_errors=0,rx_brate=90600,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.476,ul_mcs=22.2195,ul_samples=41,dl_mcs=27.7876,dl_samples=226,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=51740,dl_prbs=71936,ul_prbs=1258,tx_pkts=105,tx_errors=0,tx_brate=7632904,rx_pkts=20,rx_errors=0,rx_brate=76208,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.446,ul_mcs=22.0882,ul_samples=34,dl_mcs=27.9023,dl_samples=215,imsi=1010123456789,} "}
{"ts":1737229127967,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737229127967,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
{"ts":1737229130509,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"added ue 001010123456780"}
{"ts":1737229133065,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
{"ts":1737229133067,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>6</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 00 80 
                                8C 00 01 00 00 46 20 01 14 30 10 04 B8 01 7B 01 
                                00 04 00 81 2D 50 01 16 01 00 03 01 4B 80 03 80 
                                00 0F 00 00 03 80 01 0F 04 80 FB 0D 0D 00 06 80 
                                EE 00 58 8B A3 01 2C 06 80 ED 00 DE 6B 73 02 00 
                                F3 06 00 EB 30 0C C1 0C 00 00 47 20 01 18 D0 10 
                                04 DF 01 79 01 03 04 00 82 32 48 01 18 01 00 03 
                                01 55 50 03 80 00 0F 00 00 03 80 01 0F 05 80 F2 
                                1A 1E 1B 00 05 80 F0 15 BE 83 01 2B 06 80 ED 00 
                                DE 63 29 02 00 FD 06 00 EB 30 0C C1 15 4A 00 01 
                                50 10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 
                                20 CB 59 24 20 01 9D 90 03 00 16 00 01 00 00 46 
                                20 65 AC 92 10 D7 B8 00 00 47 20 65 AC 92 10 C5 
                                D8
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70704</dl-PRBUsage>
                                                        <ul-PRBUsage>1208</ul-PRBUsage>
                                                        <tx-pkts>123</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>8465744</tx-brate>
                                                        <rx-pkts>22</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>84864</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.40625</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.136363983154297</ul-mcs>
                                                        <ul-samples>44</ul-samples>
                                                        <dl-mcs>27.802465438842773</dl-mcs>
                                                        <dl-samples>243</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71888</dl-PRBUsage>
                                                        <ul-PRBUsage>1247</ul-PRBUsage>
                                                        <tx-pkts>121</tx-pkts>
                                                        <tx-errors>3</tx-errors>
                                                        <tx-brate>8532552</tx-brate>
                                                        <rx-pkts>24</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>87376</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.47039794921875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.744186401367188</ul-mcs>
                                                        <ul-samples>43</ul-samples>
                                                        <dl-mcs>27.798418045043945</dl-mcs>
                                                        <dl-samples>253</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>105872</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>55224</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>50648</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229133069,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229133069,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229133070,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=55224,dl_prbs=70704,ul_prbs=1208,tx_pkts=123,tx_errors=0,tx_brate=8465744,rx_pkts=22,rx_errors=0,rx_brate=84864,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.406,ul_mcs=22.1364,ul_samples=44,dl_mcs=27.8025,dl_samples=243,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=50648,dl_prbs=71888,ul_prbs=1247,tx_pkts=121,tx_errors=3,tx_brate=8532552,rx_pkts=24,rx_errors=0,rx_brate=87376,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.47,ul_mcs=21.7442,ul_samples=43,dl_mcs=27.7984,dl_samples=253,imsi=1010123456789,} "}
{"ts":1737229133083,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"no slices in KPM report; not autoequalizing"}
{"ts":1737229133083,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"current shares: fast[share=1024] secure_slice[share=1] "}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceUeBindRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceUeBindRequest>
            <sliceName>fast</sliceName>
            <imsiList>
                <IMSI>30 30 31 30 31 30 31 32 33 34 35 36 37 38 39</IMSI>
            </imsiList>
        </sliceUeBindRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>8</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>0C</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>
                                18 18 66 61 73 74 00 3C 30 30 31 30 31 30 31 32 
                                33 34 35 36 37 38 39
                            </RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229135538,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=-1635280086,requestor_id=24813,instance_id=8,meid=enB_macro_001_001_0019b0) "}
{"ts":1737229135538,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound ue 001010123456789 to slice fast"}
{"ts":1737229135543,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>8</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                02 03 66 61 73 74 00 04 00 00 01 0D 31 30 31 30 
                                31 32 33 34 35 36 37 38 39 85 80 73 65 63 75 72 
                                65 5F 73 6C 69 63 65 00 00 01 00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
{"ts":1737229135544,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                        <UeStatus>
                            <imsi>31 30 31 30 31 32 33 34 35 36 37 38 39</imsi>
                            <connected><true/></connected>
                        </UeStatus>
                    </ueList>
                </SliceStatus>
                <SliceStatus>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737229135544,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
<E2SM-NexRAN-ControlHeader>
    <controlHeaderFormat1>
        <controlMessageId><sliceUeBindRequest/></controlMessageId>
    </controlHeaderFormat1>
</E2SM-NexRAN-ControlHeader>
<E2SM-NexRAN-ControlMessage>
    <controlMessageFormat1>
        <sliceUeBindRequest>
            <sliceName>fast</sliceName>
            <imsiList>
                <IMSI>30 30 31 30 31 30 31 32 33 34 35 36 37 38 30</IMSI>
            </imsiList>
        </sliceUeBindRequest>
    </controlMessageFormat1>
</E2SM-NexRAN-ControlMessage>
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolRequest>
                <protocolIEs>
                    <RICcontrolRequest-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>9</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>22</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolHeader>0C</RICcontrolHeader>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>23</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolMessage>
                                18 18 66 61 73 74 00 3C 30 30 31 30 31 30 31 32 
                                33 34 35 36 37 38 30
                            </RICcontrolMessage>
                        </value>
                    </RICcontrolRequest-IEs>
                    <RICcontrolRequest-IEs>
                        <id>21</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolAckRequest><ack/></RICcontrolAckRequest>
                        </value>
                    </RICcontrolRequest-IEs>
                </protocolIEs>
            </RICcontrolRequest>
{"ts":1737229135563,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"sent control request (subid=1214568714,requestor_id=24813,instance_id=9,meid=enB_macro_001_001_0019b0) "}
{"ts":1737229135563,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"bound ue 001010123456780 to slice fast"}
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229135570,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12041, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <successfulOutcome>
        <procedureCode>4</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICcontrolAcknowledge>
                <protocolIEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>24813</ricRequestorID>
                                <ricInstanceID>9</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>1</RANfunctionID>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>24</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolStatus><success/></RICcontrolStatus>
                        </value>
                    </RICcontrolAcknowledge-IEs>
                    <RICcontrolAcknowledge-IEs>
                        <id>32</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICcontrolOutcome>
                                02 03 66 61 73 74 00 04 00 00 02 0D 31 30 31 30 
                                31 32 33 34 35 36 37 38 39 86 80 31 30 31 30 31 
                                32 33 34 35 36 37 38 30 85 80 73 65 63 75 72 65 
                                5F 73 6C 69 63 65 00 00 01 00 00
                            </RICcontrolOutcome>
                        </value>
                    </RICcontrolAcknowledge-IEs>
{"ts":1737229135571,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded successful outcome RICcontrol (4) "}
{"ts":1737229135571,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran ControlAck handler"}
                </protocolIEs>
            </RICcontrolAcknowledge>
        </value>
    </successfulOutcome>
</E2AP-PDU>
<E2SM-NexRAN-ControlOutcome>
    <controlOutcomeFormat1>
        <sliceStatusReport>
            <sliceStatusList>
                <SliceStatus>
                    <sliceName>fast</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1024</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                        <UeStatus>
                            <imsi>31 30 31 30 31 32 33 34 35 36 37 38 39</imsi>
                            <connected><true/></connected>
                        </UeStatus>
                        <UeStatus>
                            <imsi>31 30 31 30 31 32 33 34 35 36 37 38 30</imsi>
                            <connected><true/></connected>
                        </UeStatus>
                    </ueList>
                </SliceStatus>
                <SliceStatus>
                    <sliceName>secure_slice</sliceName>
                    <schedPolicy>
                        <proportionalAllocationPolicy>
                            <share>1</share>
                        </proportionalAllocationPolicy>
                    </schedPolicy>
                    <ueList>
                    </ueList>
                </SliceStatus>
            </sliceStatusList>
        </sliceStatusReport>
    </controlOutcomeFormat1>
</E2SM-NexRAN-ControlOutcome>
{"ts":1737229138189,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>7</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                91 00 01 00 00 46 20 01 15 04 10 04 CF 02 00 91 
                                01 00 04 00 98 00 38 01 1B 01 00 03 01 C0 88 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D0 CC AD 
                                00 06 80 ED 00 AE AA AD 01 42 06 80 EE 00 6F 60 
                                FF 02 01 42 06 00 EB 30 0C C1 0C 00 00 47 20 01 
                                18 F4 10 05 20 02 00 8D 01 01 04 00 9A 57 60 01 
                                1C 01 00 03 01 E0 D0 03 80 00 0F 00 00 03 80 01 
                                0F 05 80 F2 1A 1C 1B 00 06 80 EE 00 58 7D C1 01 
                                39 06 80 EE 00 6F 67 6B 02 01 2E 06 00 EB 30 0C 
                                C1 15 3E 00 00 03 66 61 73 74 20 02 2D F8 10 09 
                                EF 02 01 1E 01 01 04 01 32 57 98 01 37 01 00 03 
                                03 A1 58 03 80 00 0F 00 00 03 80 01 0F 00 00 05 
                                80 F0 15 FA 63 01 7B 06 80 EE 00 6F 64 35 02 02 
                                70 4A 00 01 50 10 08 00 F1 10 80 01 60 00 00 00 
                                00 00 60 07 20 CB 59 24 20 01 A9 8C 03 80 16 00 
                                01 00 00 46 20 65 AC 92 10 D3 74 00 00 47 20 65 
                                AC 92 10 D6 18 0F 00 00 03 66 61 73 74 20 CB 59 
                                24 20 01 A9 8C
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
{"ts":1737229138190,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70916</dl-PRBUsage>
                                                        <ul-PRBUsage>1231</ul-PRBUsage>
                                                        <tx-pkts>145</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>9961528</tx-brate>
                                                        <rx-pkts>27</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>114824</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.399757385253906</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.833337783813477</ul-mcs>
                                                        <ul-samples>66</ul-samples>
                                                        <dl-mcs>27.844722747802734</dl-mcs>
                                                        <dl-samples>322</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71924</dl-PRBUsage>
                                                        <ul-PRBUsage>1312</ul-PRBUsage>
                                                        <tx-pkts>141</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>10114912</tx-brate>
                                                        <rx-pkts>28</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>123088</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.43914794921875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.122806549072266</ul-mcs>
                                                        <ul-samples>57</ul-samples>
                                                        <dl-mcs>27.850994110107422</dl-mcs>
                                                        <dl-samples>302</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142840</dl-PRBUsage>
                                                        <ul-PRBUsage>2543</ul-PRBUsage>
                                                        <tx-pkts>286</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>20076440</tx-brate>
                                                        <rx-pkts>55</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>237912</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.978073120117188</ul-mcs>
                                                        <ul-samples>123</ul-samples>
                                                        <dl-mcs>27.847858428955078</dl-mcs>
                                                        <dl-samples>624</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>108940</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>54132</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>54808</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>108940</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229138194,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229138194,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229138195,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=54132,dl_prbs=70916,ul_prbs=1231,tx_pkts=145,tx_errors=0,tx_brate=9961528,rx_pkts=27,rx_errors=0,rx_brate=114824,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.4,ul_mcs=21.8333,ul_samples=66,dl_mcs=27.8447,dl_samples=322,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=54808,dl_prbs=71924,ul_prbs=1312,tx_pkts=141,tx_errors=1,tx_brate=10114912,rx_pkts=28,rx_errors=0,rx_brate=123088,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.439,ul_mcs=22.1228,ul_samples=57,dl_mcs=27.851,dl_samples=302,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=108940,dl_prbs=142840,ul_prbs=2543,tx_pkts=286,tx_errors=1,tx_brate=20076440,rx_pkts=55,rx_errors=0,rx_brate=237912,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=21.9781,ul_samples=123,dl_mcs=27.8479,dl_samples=624,} "}
{"ts":1737229138218,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 7"}
{"ts":1737229138218,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 7"}
{"ts":1737229138232,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229138236,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
{"ts":1737229143308,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>8</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 6F 
                                00 01 00 00 46 20 01 14 7C 10 05 90 01 0C 01 00 
                                03 0C 06 C8 01 03 01 00 02 46 98 03 80 00 0F 00 
                                00 03 80 01 0F 00 00 00 01 06 06 80 ED 00 DC 5D 
                                17 01 0B 06 00 EB 30 0C C1 0C 00 00 47 20 01 17 
                                58 10 05 3B 01 06 01 00 03 06 48 C8 01 02 01 00 
                                02 36 A0 03 80 00 0F 00 00 03 80 01 0F 00 00 00 
                                01 04 03 80 02 07 01 17 06 00 EB 30 0C C1 15 35 
                                00 00 03 66 61 73 74 20 02 2B D4 10 0A CB 01 12 
                                01 00 03 12 4F 90 01 05 01 00 02 7D 38 03 80 00 
                                0F 00 00 03 80 01 0F 00 00 00 01 0A 06 80 EF 00 
                                37 8B A3 01 22 4A 00 01 50 10 08 00 F1 10 80 01 
                                60 00 00 00 00 00 60 07 20 CB 59 24 20 01 BD A8 
                                03 80 16 00 01 00 00 46 20 65 AC 92 10 E5 88 00 
                                00 47 20 65 AC 92 10 D8 20 0F 00 00 03 66 61 73 
                                74 20 CB 59 24 20 01 BD A8
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
{"ts":1737229143309,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70780</dl-PRBUsage>
                                                        <ul-PRBUsage>1424</ul-PRBUsage>
                                                        <tx-pkts>12</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>788168</tx-brate>
                                                        <rx-pkts>3</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>18072</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>6</ul-samples>
                                                        <dl-mcs>27.545454025268555</dl-mcs>
                                                        <dl-samples>11</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71512</dl-PRBUsage>
                                                        <ul-PRBUsage>1339</ul-PRBUsage>
                                                        <tx-pkts>6</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>411848</tx-brate>
                                                        <rx-pkts>2</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>13984</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>4</ul-samples>
                                                        <dl-mcs>28.0</dl-mcs>
                                                        <dl-samples>23</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142292</dl-PRBUsage>
                                                        <ul-PRBUsage>2763</ul-PRBUsage>
                                                        <tx-pkts>18</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>1200016</tx-brate>
                                                        <rx-pkts>5</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>32056</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>10</ul-samples>
                                                        <dl-mcs>27.772727966308594</dl-mcs>
                                                        <dl-samples>34</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
{"ts":1737229143312,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229143312,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229143313,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=58760,dl_prbs=70780,ul_prbs=1424,tx_pkts=12,tx_errors=0,tx_brate=788168,rx_pkts=3,rx_errors=0,rx_brate=18072,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=0,ul_samples=6,dl_mcs=27.5455,dl_samples=11,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=55328,dl_prbs=71512,ul_prbs=1339,tx_pkts=6,tx_errors=0,tx_brate=411848,rx_pkts=2,rx_errors=0,rx_brate=13984,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=0,ul_samples=4,dl_mcs=28,dl_samples=23,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=114088,dl_prbs=142292,ul_prbs=2763,tx_pkts=18,tx_errors=0,tx_brate=1200016,rx_pkts=5,rx_errors=0,rx_brate=32056,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=0,ul_samples=10,dl_mcs=27.7727,dl_samples=34,} "}
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>114088</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>58760</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>55328</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>114088</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229143350,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 8"}
{"ts":1737229143350,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 8"}
{"ts":1737229143354,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229143358,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
1737229146746 1/RMR [INFO] sends: ts=1737229146 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737229146746 1/RMR [INFO] sends: ts=1737229146 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229146746 1/RMR [INFO] sends: ts=1737229146 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229146746 1/RMR [INFO] sends: ts=1737229146 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229146746 1/RMR [INFO] sends: ts=1737229146 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
{"ts":1737229148429,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>9</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                89 00 01 00 00 46 20 01 15 64 10 05 24 01 20 01 
                                00 03 21 41 80 01 05 01 00 02 4A B8 03 80 00 0F 
                                00 00 03 80 01 0F 05 80 F2 1A 0F 37 00 06 80 ED 
                                00 B1 B6 DB 01 0E 06 80 ED 00 DF 50 75 01 46 06 
                                00 EB 30 0C C1 0C 00 00 47 20 01 15 78 10 05 09 
                                01 1B 01 00 03 1D E7 60 01 05 01 00 02 59 C8 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D1 11 B9 
                                00 06 80 ED 00 B3 55 55 01 0C 06 80 ED 00 DF 26 
                                21 01 2F 06 00 EB 30 0C C1 15 3B 00 00 03 66 61 
                                73 74 20 02 2A DC 10 0A 2D 01 3B 01 00 03 3F 28 
                                E0 01 0A 01 00 03 00 A4 80 03 80 00 0F 00 00 03 
                                80 01 0F 00 00 05 80 F0 16 50 C3 01 1A 06 80 ED 
                                00 DF 3B 4B 01 75 4A 00 01 50 10 08 00 F1 10 80 
                                01 60 00 00 00 00 00 60 07 20 C9 45 F2 20 01 AC 
                                64 03 80 16 00 01 00 00 46 20 63 99 60 10 DE 04 
                                00 00 47 20 65 AC 92 10 CE 60 0F 00 00 03 66 61 
                                73 74 20 C9 45 F2 20 01 AC 64
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
{"ts":1737229148431,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71012</dl-PRBUsage>
                                                        <ul-PRBUsage>1316</ul-PRBUsage>
                                                        <tx-pkts>32</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>2179456</tx-brate>
                                                        <rx-pkts>5</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>19128</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.23773193359375</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.214284896850586</ul-mcs>
                                                        <ul-samples>14</ul-samples>
                                                        <dl-mcs>27.914285659790039</dl-mcs>
                                                        <dl-samples>70</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71032</dl-PRBUsage>
                                                        <ul-PRBUsage>1289</ul-PRBUsage>
                                                        <tx-pkts>27</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>1959776</tx-brate>
                                                        <rx-pkts>5</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>22984</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.534614562988281</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.416666030883789</ul-mcs>
                                                        <ul-samples>12</ul-samples>
                                                        <dl-mcs>27.893617630004883</dl-mcs>
                                                        <dl-samples>47</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142044</dl-PRBUsage>
                                                        <ul-PRBUsage>2605</ul-PRBUsage>
                                                        <tx-pkts>59</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>4139232</tx-brate>
                                                        <rx-pkts>10</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>42112</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.315475463867188</ul-mcs>
                                                        <ul-samples>26</ul-samples>
                                                        <dl-mcs>27.903951644897461</dl-mcs>
                                                        <dl-samples>117</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>109668</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>56836</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>52832</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13190642</bytesDL>
                                                            <bytesUL>109668</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
{"ts":1737229148435,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229148435,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229148436,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6527328,ul_bytes=56836,dl_prbs=71012,ul_prbs=1316,tx_pkts=32,tx_errors=0,tx_brate=2179456,rx_pkts=5,rx_errors=0,rx_brate=19128,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.238,ul_mcs=22.2143,ul_samples=14,dl_mcs=27.9143,dl_samples=70,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=52832,dl_prbs=71032,ul_prbs=1289,tx_pkts=27,tx_errors=0,tx_brate=1959776,rx_pkts=5,rx_errors=0,rx_brate=22984,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.535,ul_mcs=22.4167,ul_samples=12,dl_mcs=27.8936,dl_samples=47,imsi=1010123456789,} slice[fast]={dl_bytes=13190642,ul_bytes=109668,dl_prbs=142044,ul_prbs=2605,tx_pkts=59,tx_errors=0,tx_brate=4139232,rx_pkts=10,rx_errors=0,rx_brate=42112,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.3155,ul_samples=26,dl_mcs=27.904,dl_samples=117,} "}
{"ts":1737229148474,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 9"}
{"ts":1737229148474,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 9"}
{"ts":1737229148480,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229148484,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
{"ts":1737229153550,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
{"ts":1737229153551,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>10</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8B 00 01 00 00 46 20 01 16 10 10 05 39 01 30 01 
                                00 03 31 E2 B0 01 0A 01 00 03 00 8B F0 03 80 00 
                                0F 00 00 03 80 01 0F 05 80 F2 1A 06 3D 00 06 80 
                                ED 00 AC 92 49 01 15 06 80 ED 00 DE FA FB 01 66 
                                06 00 EB 30 0C C1 0C 00 00 47 20 01 17 E8 10 04 
                                DC 01 2D 01 00 03 31 E9 68 01 08 01 00 03 00 8F 
                                50 03 80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D1 
                                0E 7F 00 06 80 EE 00 59 11 11 01 0F 06 80 EE 00 
                                6F 9D F5 01 5E 06 00 EB 30 0C C1 15 3D 00 00 03 
                                66 61 73 74 20 02 2D F8 10 0A 15 01 5D 01 00 03 
                                63 CC 18 01 12 01 00 03 01 1B 40 03 80 00 0F 00 
                                00 03 80 01 0F 00 00 06 80 EE 00 57 AD 1B 01 24 
                                06 80 EE 00 6F 8D B9 02 00 C4 4A 00 01 50 10 08 
                                00 F1 10 80 01 60 00 00 00 00 00 60 07 20 C9 45 
                                F2 20 01 A5 E4 03 80 16 00 01 00 00 46 20 65 AC 
                                92 10 DA C4 00 00 47 20 63 99 60 10 CB 20 0F 00 
                                00 03 66 61 73 74 20 C9 45 F2 20 01 A5 E4
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71184</dl-PRBUsage>
                                                        <ul-PRBUsage>1337</ul-PRBUsage>
                                                        <tx-pkts>48</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>3269296</tx-brate>
                                                        <rx-pkts>10</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>35824</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.09747314453125</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.571428298950195</ul-mcs>
                                                        <ul-samples>21</ul-samples>
                                                        <dl-mcs>27.872549057006836</dl-mcs>
                                                        <dl-samples>102</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71656</dl-PRBUsage>
                                                        <ul-PRBUsage>1244</ul-PRBUsage>
                                                        <tx-pkts>45</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>3271016</tx-brate>
                                                        <rx-pkts>8</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>36688</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.528312683105469</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.266666412353516</ul-mcs>
                                                        <ul-samples>15</ul-samples>
                                                        <dl-mcs>27.904254913330078</dl-mcs>
                                                        <dl-samples>94</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142840</dl-PRBUsage>
                                                        <ul-PRBUsage>2581</ul-PRBUsage>
                                                        <tx-pkts>93</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>6540312</tx-brate>
                                                        <rx-pkts>18</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>72512</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.919048309326172</ul-mcs>
                                                        <ul-samples>36</ul-samples>
                                                        <dl-mcs>27.888401031494141</dl-mcs>
{"ts":1737229153554,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229153554,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229153554,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=56004,dl_prbs=71184,ul_prbs=1337,tx_pkts=48,tx_errors=0,tx_brate=3269296,rx_pkts=10,rx_errors=0,rx_brate=35824,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.097,ul_mcs=21.5714,ul_samples=21,dl_mcs=27.8725,dl_samples=102,imsi=1010123456780,} ue[71]={dl_bytes=6527328,ul_bytes=52000,dl_prbs=71656,ul_prbs=1244,tx_pkts=45,tx_errors=0,tx_brate=3271016,rx_pkts=8,rx_errors=0,rx_brate=36688,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.528,ul_mcs=22.2667,ul_samples=15,dl_mcs=27.9043,dl_samples=94,imsi=1010123456789,} slice[fast]={dl_bytes=13190642,ul_bytes=108004,dl_prbs=142840,ul_prbs=2581,tx_pkts=93,tx_errors=0,tx_brate=6540312,rx_pkts=18,rx_errors=0,rx_brate=72512,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=21.919,ul_samples=36,dl_mcs=27.8884,dl_samples=196,} "}
                                                        <dl-samples>196</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13190642</pDCPBytesDL>
                                                            <pDCPBytesUL>108004</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56004</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>52000</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13190642</bytesDL>
                                                            <bytesUL>108004</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229153567,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 10"}
{"ts":1737229153567,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 10"}
{"ts":1737229153573,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229153577,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
{"ts":1737229158669,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>11</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8D 00 01 00 00 46 20 01 16 40 10 05 22 01 44 01 
                                00 03 46 75 B0 01 0D 01 00 03 00 AC C8 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 EF 00 D0 6D C5 00 06 
                                80 EE 00 58 6D B7 01 1C 06 80 EE 00 6E BA 8B 02 
                                00 81 06 00 EB 30 0C C1 0C 00 00 47 20 01 19 4C 
                                10 04 CF 01 3E 01 01 03 42 92 E0 01 0B 01 00 03 
                                00 D3 98 03 80 00 0F 00 00 03 80 01 0F 06 80 F1 
                                00 34 42 F7 00 06 80 ED 00 AF 13 B1 01 1A 06 80 
                                EE 00 6F 83 1F 01 7B 06 00 EB 30 0C C1 15 3E 00 
                                00 03 66 61 73 74 20 02 2F 8C 10 09 F1 02 00 82 
                                01 01 04 00 89 08 90 01 18 01 00 03 01 80 60 03 
                                80 00 0F 00 00 03 80 01 0F 00 00 05 80 F1 0A FF 
                                79 01 36 06 80 EE 00 6F 1E D5 02 00 FC 4A 00 01 
                                50 10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 
                                20 CB 59 24 20 01 A1 38 03 80 16 00 01 00 00 46 
                                20 65 AC 92 10 D9 F4 00 00 47 20 65 AC 92 10 C7 
                                44 0F 00 00 03 66 61 73 74 20 CB 59 24 20 01 A1 
                                38
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229158670,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71232</dl-PRBUsage>
                                                        <ul-PRBUsage>1314</ul-PRBUsage>
                                                        <tx-pkts>68</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>4617648</tx-brate>
                                                        <rx-pkts>13</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>44232</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.214393615722656</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.107143402099609</ul-mcs>
                                                        <ul-samples>28</ul-samples>
                                                        <dl-mcs>27.682170867919922</dl-mcs>
                                                        <dl-samples>129</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>72012</dl-PRBUsage>
                                                        <ul-PRBUsage>1231</ul-PRBUsage>
                                                        <tx-pkts>62</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>4362976</tx-brate>
                                                        <rx-pkts>11</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>54168</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.523162841796875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.884614944458008</ul-mcs>
                                                        <ul-samples>26</ul-samples>
                                                        <dl-mcs>27.878047943115234</dl-mcs>
                                                        <dl-samples>123</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>143244</dl-PRBUsage>
                                                        <ul-PRBUsage>2545</ul-PRBUsage>
                                                        <tx-pkts>130</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>8980624</tx-brate>
                                                        <rx-pkts>24</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>98400</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.995880126953125</ul-mcs>
                                                        <ul-samples>54</ul-samples>
                                                        <dl-mcs>27.780109405517578</dl-mcs>
                                                        <dl-samples>252</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>106808</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>55796</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>51012</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>106808</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229158673,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229158673,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229158674,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=55796,dl_prbs=71232,ul_prbs=1314,tx_pkts=68,tx_errors=0,tx_brate=4617648,rx_pkts=13,rx_errors=0,rx_brate=44232,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.214,ul_mcs=22.1071,ul_samples=28,dl_mcs=27.6822,dl_samples=129,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=51012,dl_prbs=72012,ul_prbs=1231,tx_pkts=62,tx_errors=1,tx_brate=4362976,rx_pkts=11,rx_errors=0,rx_brate=54168,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.523,ul_mcs=21.8846,ul_samples=26,dl_mcs=27.878,dl_samples=123,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=106808,dl_prbs=143244,ul_prbs=2545,tx_pkts=130,tx_errors=1,tx_brate=8980624,rx_pkts=24,rx_errors=0,rx_brate=98400,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=21.9959,ul_samples=54,dl_mcs=27.7801,dl_samples=252,} "}
{"ts":1737229158690,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 11"}
{"ts":1737229158690,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 11"}
{"ts":1737229158695,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229158699,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
{"ts":1737229163790,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>12</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8E 00 01 00 00 46 20 01 14 34 10 04 F6 01 54 01 
                                00 03 57 BD C8 01 10 01 00 03 00 F9 D0 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 EF 00 D0 EE 8B 00 06 
                                80 ED 00 B0 75 07 01 23 06 80 ED 00 DE 5F 77 02 
                                00 B1 06 00 EB 30 0C C1 0C 00 00 47 20 01 18 C0 
                                10 04 FB 01 57 01 01 03 5F D1 40 01 0E 01 00 03 
                                00 F1 F0 03 80 00 0F 00 00 03 80 01 0F 06 80 EF 
                                00 D1 0E 13 00 06 80 ED 00 B1 EB 85 01 19 06 80 
                                EE 00 6F 81 81 02 00 AA 06 00 EB 30 0C C1 15 3F 
                                00 00 03 66 61 73 74 20 02 2C F4 10 09 F1 02 00 
                                AB 01 01 04 00 B7 8F 08 01 1E 01 00 03 01 EB C0 
                                03 80 00 0F 00 00 03 80 01 0F 00 00 06 80 EE 00 
                                58 98 23 01 3C 06 80 EF 00 37 AC 4F 02 01 5B 4A 
                                00 01 50 10 08 00 F1 10 80 01 60 00 00 00 00 00 
                                60 07 20 CB 59 24 20 01 A3 74 03 80 16 00 01 00 
                                00 46 20 65 AC 92 10 DC CC 00 00 47 20 65 AC 92 
                                10 C6 A8 0F 00 00 03 66 61 73 74 20 CB 59 24 20 
                                01 A3 74
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
{"ts":1737229163791,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70708</dl-PRBUsage>
                                                        <ul-PRBUsage>1270</ul-PRBUsage>
                                                        <tx-pkts>84</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>5750216</tx-brate>
                                                        <rx-pkts>16</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>63952</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.465904235839844</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.05714225769043</ul-mcs>
                                                        <ul-samples>35</ul-samples>
                                                        <dl-mcs>27.796613693237305</dl-mcs>
                                                        <dl-samples>177</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71872</dl-PRBUsage>
                                                        <ul-PRBUsage>1275</ul-PRBUsage>
                                                        <tx-pkts>87</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>6279488</tx-brate>
                                                        <rx-pkts>14</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>61936</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.527488708496094</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.239999771118164</ul-mcs>
                                                        <ul-samples>25</ul-samples>
                                                        <dl-mcs>27.876468658447266</dl-mcs>
                                                        <dl-samples>170</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142580</dl-PRBUsage>
                                                        <ul-PRBUsage>2545</ul-PRBUsage>
                                                        <tx-pkts>171</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>12029704</tx-brate>
                                                        <rx-pkts>30</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>125888</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.148571014404297</ul-mcs>
                                                        <ul-samples>60</ul-samples>
                                                        <dl-mcs>27.836540222167969</dl-mcs>
                                                        <dl-samples>347</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>107380</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>56524</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>50856</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>107380</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
{"ts":1737229163795,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229163795,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229163795,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=56524,dl_prbs=70708,ul_prbs=1270,tx_pkts=84,tx_errors=0,tx_brate=5750216,rx_pkts=16,rx_errors=0,rx_brate=63952,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.466,ul_mcs=22.0571,ul_samples=35,dl_mcs=27.7966,dl_samples=177,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=50856,dl_prbs=71872,ul_prbs=1275,tx_pkts=87,tx_errors=1,tx_brate=6279488,rx_pkts=14,rx_errors=0,rx_brate=61936,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.527,ul_mcs=22.24,ul_samples=25,dl_mcs=27.8765,dl_samples=170,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=107380,dl_prbs=142580,ul_prbs=2545,tx_pkts=171,tx_errors=1,tx_brate=12029704,rx_pkts=30,rx_errors=0,rx_brate=125888,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.1486,ul_samples=60,dl_mcs=27.8365,dl_samples=347,} "}
{"ts":1737229163812,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 12"}
{"ts":1737229163812,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 12"}
{"ts":1737229163816,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229163820,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
{"ts":1737229168909,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>13</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8B 00 01 00 00 46 20 01 14 A8 10 05 27 01 61 01 
                                00 03 66 15 60 01 14 01 00 03 01 3D 00 03 80 00 
                                0F 00 00 03 80 01 0F 05 80 F2 1A 10 F3 00 06 80 
                                ED 00 AF 82 9D 01 31 05 80 F3 03 7B 53 02 00 DB 
                                06 00 EB 30 0C C1 0C 00 00 47 20 01 18 E4 10 05 
                                03 01 64 01 01 03 6E 4D 98 01 0F 01 00 03 01 03 
                                18 03 80 00 0F 00 00 03 80 01 0F 06 80 F0 00 68 
                                86 7D 00 06 80 ED 00 B3 06 EB 01 25 05 80 F0 1B 
                                E5 ED 02 00 D8 06 00 EB 30 0C C1 15 3F 00 00 03 
                                66 61 73 74 20 02 2D 8C 10 0A 2A 02 00 C5 01 01 
                                04 00 D4 62 F8 01 23 01 00 03 02 40 18 03 80 00 
                                0F 00 00 03 80 01 0F 00 00 06 80 EF 00 2C 51 31 
                                01 56 06 80 EF 00 37 C0 85 02 01 B3 4A 00 01 50 
                                10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 20 
                                CB 59 24 20 01 AB 2C 03 80 16 00 01 00 00 46 20 
                                65 AC 92 10 E1 E0 00 00 47 20 65 AC 92 10 C9 4C 
                                0F 00 00 03 66 61 73 74 20 CB 59 24 20 01 AB 2C
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
{"ts":1737229168911,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70824</dl-PRBUsage>
                                                        <ul-PRBUsage>1319</ul-PRBUsage>
                                                        <tx-pkts>97</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>6690144</tx-brate>
                                                        <rx-pkts>20</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>81152</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.26483154296875</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.938776016235352</ul-mcs>
                                                        <ul-samples>49</ul-samples>
                                                        <dl-mcs>27.8538818359375</dl-mcs>
                                                        <dl-samples>219</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71908</dl-PRBUsage>
                                                        <ul-PRBUsage>1283</ul-PRBUsage>
                                                        <tx-pkts>100</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>7228824</tx-brate>
                                                        <rx-pkts>15</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>66328</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.525344848632812</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.378377914428711</ul-mcs>
                                                        <ul-samples>37</ul-samples>
                                                        <dl-mcs>27.898147583007812</dl-mcs>
                                                        <dl-samples>216</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142732</dl-PRBUsage>
                                                        <ul-PRBUsage>2602</ul-PRBUsage>
                                                        <tx-pkts>197</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>13918968</tx-brate>
                                                        <rx-pkts>35</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>147480</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.158576965332031</ul-mcs>
                                                        <ul-samples>86</ul-samples>
                                                        <dl-mcs>27.876014709472656</dl-mcs>
                                                        <dl-samples>435</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>109356</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>57824</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>51532</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>109356</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229168914,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229168914,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229168915,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=57824,dl_prbs=70824,ul_prbs=1319,tx_pkts=97,tx_errors=0,tx_brate=6690144,rx_pkts=20,rx_errors=0,rx_brate=81152,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.265,ul_mcs=21.9388,ul_samples=49,dl_mcs=27.8539,dl_samples=219,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=51532,dl_prbs=71908,ul_prbs=1283,tx_pkts=100,tx_errors=1,tx_brate=7228824,rx_pkts=15,rx_errors=0,rx_brate=66328,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.525,ul_mcs=22.3784,ul_samples=37,dl_mcs=27.8981,dl_samples=216,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=109356,dl_prbs=142732,ul_prbs=2602,tx_pkts=197,tx_errors=1,tx_brate=13918968,rx_pkts=35,rx_errors=0,rx_brate=147480,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.1586,ul_samples=86,dl_mcs=27.876,dl_samples=435,} "}
{"ts":1737229168938,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 13"}
{"ts":1737229168938,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 13"}
{"ts":1737229168942,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229168947,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>14</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
{"ts":1737229174030,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8C 00 01 00 00 46 20 01 14 A0 10 05 37 01 78 01 
                                00 03 7B E8 48 01 17 01 00 03 01 8C 18 03 80 00 
                                0F 00 00 03 80 01 0F 06 80 EF 00 D0 BA 6B 00 06 
                                80 ED 00 AF FF FF 01 2B 05 80 F0 1B CC CD 02 00 
                                E1 06 00 EB 30 0C C1 0C 00 00 47 20 01 17 8C 10 
                                04 C7 01 6D 01 02 03 76 3D 28 01 13 01 00 03 01 
                                31 C8 03 80 00 0F 00 00 03 80 01 0F 06 80 EF 00 
                                D0 F8 05 00 05 80 F1 0B 1B AD 01 25 06 80 EF 00 
                                37 BE 4D 02 00 E2 06 00 EB 30 0C C1 15 3E 00 00 
                                03 66 61 73 74 20 02 2C 2C 10 09 FE 02 00 E5 01 
                                02 04 00 F2 25 70 01 2A 01 00 03 02 BD E0 03 80 
                                00 0F 00 00 03 80 01 0F 00 00 05 80 F0 16 1B AD 
                                01 50 06 80 EE 00 6F 57 E7 02 01 C3 4A 00 01 50 
                                10 08 00 F1 10 80 01 60 00 00 00 00 00 60 07 20 
                                CB 59 24 20 01 A6 18 03 80 16 00 01 00 00 46 20 
                                65 AC 92 10 DF 08 00 00 47 20 65 AC 92 10 C7 10 
                                0F 00 00 03 66 61 73 74 20 CB 59 24 20 01 A6 18
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229174031,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>70816</dl-PRBUsage>
                                                        <ul-PRBUsage>1335</ul-PRBUsage>
                                                        <tx-pkts>120</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>8120392</tx-brate>
                                                        <rx-pkts>23</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>101400</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.364097595214844</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.999998092651367</ul-mcs>
                                                        <ul-samples>43</ul-samples>
                                                        <dl-mcs>27.800003051757812</dl-mcs>
                                                        <dl-samples>225</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71564</dl-PRBUsage>
                                                        <ul-PRBUsage>1223</ul-PRBUsage>
                                                        <tx-pkts>109</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>7748904</tx-brate>
                                                        <rx-pkts>19</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>78280</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.484413146972656</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.216217041015625</ul-mcs>
                                                        <ul-samples>37</ul-samples>
                                                        <dl-mcs>27.871681213378906</dl-mcs>
                                                        <dl-samples>226</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142380</dl-PRBUsage>
                                                        <ul-PRBUsage>2558</ul-PRBUsage>
                                                        <tx-pkts>229</tx-pkts>
                                                        <tx-errors>2</tx-errors>
                                                        <tx-brate>15869296</tx-brate>
                                                        <rx-pkts>42</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>179680</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.108108520507812</ul-mcs>
                                                        <ul-samples>80</ul-samples>
                                                        <dl-mcs>27.835842132568359</dl-mcs>
                                                        <dl-samples>451</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13326628</pDCPBytesDL>
                                                            <pDCPBytesUL>108056</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>57096</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>50960</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13326628</bytesDL>
                                                            <bytesUL>108056</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
{"ts":1737229174036,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229174036,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229174036,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=57096,dl_prbs=70816,ul_prbs=1335,tx_pkts=120,tx_errors=0,tx_brate=8120392,rx_pkts=23,rx_errors=0,rx_brate=101400,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.364,ul_mcs=22,ul_samples=43,dl_mcs=27.8,dl_samples=225,imsi=1010123456780,} ue[71]={dl_bytes=6663314,ul_bytes=50960,dl_prbs=71564,ul_prbs=1223,tx_pkts=109,tx_errors=2,tx_brate=7748904,rx_pkts=19,rx_errors=0,rx_brate=78280,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.484,ul_mcs=22.2162,ul_samples=37,dl_mcs=27.8717,dl_samples=226,imsi=1010123456789,} slice[fast]={dl_bytes=13326628,ul_bytes=108056,dl_prbs=142380,ul_prbs=2558,tx_pkts=229,tx_errors=2,tx_brate=15869296,rx_pkts=42,rx_errors=0,rx_brate=179680,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=22.1081,ul_samples=80,dl_mcs=27.8358,dl_samples=451,} "}
{"ts":1737229174077,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 14"}
{"ts":1737229174077,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 14"}
{"ts":1737229174082,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229174087,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
1737229177750 1/RMR [INFO] sends: ts=1737229177 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737229177750 1/RMR [INFO] sends: ts=1737229177 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229177750 1/RMR [INFO] sends: ts=1737229177 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229177750 1/RMR [INFO] sends: ts=1737229177 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229177750 1/RMR [INFO] sends: ts=1737229177 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
<E2AP-PDU>
    <initiatingMessage>
{"ts":1737229179151,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
{"ts":1737229179152,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>15</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 80 
                                8F 00 01 00 00 46 20 01 16 0C 10 05 4F 02 00 90 
                                01 00 04 00 95 A9 08 01 19 01 00 03 01 A9 28 03 
                                80 00 0F 00 00 03 80 01 0F 06 80 EF 00 D0 79 27 
                                00 06 80 EF 00 2B 65 6F 01 35 05 80 F1 0D E0 37 
                                02 01 2A 06 00 EB 30 0C C1 0C 00 00 47 20 01 16 
                                A4 10 05 01 02 00 85 01 01 04 00 92 37 D8 01 1C 
                                01 00 03 01 C9 D0 03 80 00 0F 00 00 03 80 01 0F 
                                06 80 EF 00 D1 04 9D 00 04 80 FE 00 59 01 38 06 
                                80 ED 00 DE D4 DB 02 01 0B 06 00 EB 30 0C C1 15 
                                3F 00 00 03 66 61 73 74 20 02 2C B0 10 0A 50 02 
                                01 15 01 01 04 01 27 E0 E0 01 35 01 00 03 03 72 
                                F8 03 80 00 0F 00 00 03 80 01 0F 00 00 06 80 EE 
                                00 57 E5 6F 01 6D 06 80 EE 00 6F 36 13 02 02 35 
                                4A 00 01 50 10 08 00 F1 10 80 01 60 00 00 00 00 
                                00 60 07 20 C8 E4 EC 20 01 A5 B0 03 80 16 00 01 
                                00 00 46 20 63 99 60 10 DE 04 00 00 47 20 65 4B 
                                8C 10 C7 AC 0F 00 00 03 66 61 73 74 20 C8 E4 EC 
                                20 01 A5 B0
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71180</dl-PRBUsage>
                                                        <ul-PRBUsage>1359</ul-PRBUsage>
                                                        <tx-pkts>144</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>9808136</tx-brate>
                                                        <rx-pkts>25</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>108840</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.236625671386719</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.698112487792969</ul-mcs>
                                                        <ul-samples>53</ul-samples>
                                                        <dl-mcs>27.751678466796875</dl-mcs>
                                                        <dl-samples>298</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>71332</dl-PRBUsage>
                                                        <ul-PRBUsage>1281</ul-PRBUsage>
                                                        <tx-pkts>133</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>9582552</tx-brate>
                                                        <rx-pkts>28</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>117200</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>104.509010314941406</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>22.25</ul-mcs>
                                                        <ul-samples>56</ul-samples>
                                                        <dl-mcs>27.853933334350586</dl-mcs>
                                                        <dl-samples>267</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>142512</dl-PRBUsage>
                                                        <ul-PRBUsage>2640</ul-PRBUsage>
                                                        <tx-pkts>277</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>19390688</tx-brate>
                                                        <rx-pkts>53</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>226040</rx-brate>
                                                        <dl-cqi>15.0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>21.974056243896484</ul-mcs>
                                                        <ul-samples>109</ul-samples>
                                                        <dl-mcs>27.802806854248047</dl-mcs>
                                                        <dl-samples>565</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
{"ts":1737229179156,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229179156,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229179156,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6527328,ul_bytes=56836,dl_prbs=71180,ul_prbs=1359,tx_pkts=144,tx_errors=0,tx_brate=9808136,rx_pkts=25,rx_errors=0,rx_brate=108840,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.237,ul_mcs=21.6981,ul_samples=53,dl_mcs=27.7517,dl_samples=298,imsi=1010123456780,} ue[71]={dl_bytes=6638476,ul_bytes=51116,dl_prbs=71332,ul_prbs=1281,tx_pkts=133,tx_errors=1,tx_brate=9582552,rx_pkts=28,rx_errors=0,rx_brate=117200,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=104.509,ul_mcs=22.25,ul_samples=56,dl_mcs=27.8539,dl_samples=267,imsi=1010123456789,} slice[fast]={dl_bytes=13165804,ul_bytes=107952,dl_prbs=142512,ul_prbs=2640,tx_pkts=277,tx_errors=1,tx_brate=19390688,rx_pkts=53,rx_errors=0,rx_brate=226040,dl_cqi=15,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=21.9741,ul_samples=109,dl_mcs=27.8028,dl_samples=565,} "}
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13165804</pDCPBytesDL>
                                                            <pDCPBytesUL>107952</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6527328</bytesDL>
                                                            <bytesUL>56836</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6638476</bytesDL>
                                                            <bytesUL>51116</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13165804</bytesDL>
                                                            <bytesUL>107952</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229179195,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 15"}
{"ts":1737229179195,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 15"}
{"ts":1737229179200,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'fast' share unchanged: 1024"}
{"ts":1737229179204,"crit":"INFO","id":"nexran","mdc":{},"msg":"slice 'secure_slice' share unchanged: 1"}
{"ts":1737229184269,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"RMR message (type 12050, source enB_macro_001_001_0019b0)"}
<E2AP-PDU>
    <initiatingMessage>
        <procedureCode>5</procedureCode>
        <criticality><reject/></criticality>
        <value>
            <RICindication>
                <protocolIEs>
                    <RICindication-IEs>
                        <id>29</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICrequestID>
                                <ricRequestorID>123</ricRequestorID>
                                <ricInstanceID>3</ricInstanceID>
                            </RICrequestID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>5</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RANfunctionID>0</RANfunctionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>15</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICactionID>1</RICactionID>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>27</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationSN>16</RICindicationSN>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>28</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationType><report/></RICindicationType>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>26</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationMessage>
                                01 04 00 00 02 40 00 00 60 00 F1 10 00 00 00 00 
                                10 00 64 00 64 02 00 F1 10 80 00 00 00 03 80 66 
                                00 01 00 00 46 20 01 16 44 10 05 1F 01 0B 01 00 
                                03 0A E8 18 01 01 01 00 02 10 28 00 00 00 00 00 
                                00 00 01 02 06 80 ED 00 DE AA AB 01 06 06 00 EB 
                                30 0C C1 0C 00 00 47 20 01 19 94 10 05 0A 01 02 
                                01 01 03 00 99 40 01 02 01 00 02 33 E0 00 00 00 
                                03 80 01 0F 00 00 00 01 02 03 80 01 0D 01 03 06 
                                00 EB 30 0C C1 15 32 00 00 03 66 61 73 74 20 02 
                                2F D8 10 0A 29 01 0D 01 01 03 0B 81 58 01 03 01 
                                00 02 44 08 00 00 00 03 80 00 0F 00 00 00 01 04 
                                06 80 EE 00 6B AA AB 01 09 4A 00 01 50 10 08 00 
                                F1 10 80 01 60 00 00 00 00 00 60 07 20 C9 A6 F8 
                                20 01 AD 00 03 80 16 00 01 00 00 46 20 65 AC 92 
                                10 E1 10 00 00 47 20 63 FA 66 10 CB F0 0F 00 00 
                                03 66 61 73 74 20 C9 A6 F8 20 01 AD 00
                            </RICindicationMessage>
                        </value>
                    </RICindication-IEs>
                    <RICindication-IEs>
                        <id>25</id>
                        <criticality><reject/></criticality>
                        <value>
                            <RICindicationHeader>08 00 F1 10</RICindicationHeader>
                        </value>
                    </RICindication-IEs>
                </protocolIEs>
            </RICindication>
        </value>
    </initiatingMessage>
</E2AP-PDU>
{"ts":1737229184270,"crit":"INFO","id":"nexran","mdc":{},"msg":"decoded initiating RICindication (5) "}
<E2SM-KPM-IndicationHeader>
    <indicationHeader-Format1>
        <pLMN-Identity>00 F1 10</pLMN-Identity>
    </indicationHeader-Format1>
</E2SM-KPM-IndicationHeader>
<E2SM-KPM-IndicationMessage>
    <ric-Style-Type>4</ric-Style-Type>
    <indicationMessage>
        <indicationMessage-Format1>
            <pm-Containers>
                <PM-Containers-List>
                    <performanceContainer>
                        <oDU>
                            <cellResourceReportList>
                                <CellResourceReportListItem>
                                    <nRCGI>
                                        <pLMN-Identity>00 F1 10</pLMN-Identity>
                                        <nRCellIdentity>
                                            000000000000000000000000000000000001
                                        </nRCellIdentity>
                                    </nRCGI>
                                    <dl-TotalofAvailablePRBs>100</dl-TotalofAvailablePRBs>
                                    <ul-TotalofAvailablePRBs>100</ul-TotalofAvailablePRBs>
                                    <servedPlmnPerCellList>
                                        <ServedPlmnPerCellListItem>
                                            <pLMN-Identity>00 F1 10</pLMN-Identity>
                                            <du-PM-EPC>
                                                <perQCIReportList>
                                                    <PerQCIReportListItem>
                                                        <qci>0</qci>
                                                    </PerQCIReportListItem>
                                                </perQCIReportList>
                                                <perUEReportList>
                                                    <PerUEReportListItem>
                                                        <rnti>70</rnti>
                                                        <dl-PRBUsage>71236</dl-PRBUsage>
                                                        <ul-PRBUsage>1311</ul-PRBUsage>
                                                        <tx-pkts>11</tx-pkts>
                                                        <tx-errors>0</tx-errors>
                                                        <tx-brate>714776</tx-brate>
                                                        <rx-pkts>1</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>4136</rx-brate>
                                                        <dl-cqi>0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>2</ul-samples>
                                                        <dl-mcs>27.833333969116211</dl-mcs>
                                                        <dl-samples>6</dl-samples>
                                                        <imsi>1010123456780</imsi>
                                                    </PerUEReportListItem>
                                                    <PerUEReportListItem>
                                                        <rnti>71</rnti>
                                                        <dl-PRBUsage>72084</dl-PRBUsage>
                                                        <ul-PRBUsage>1290</ul-PRBUsage>
                                                        <tx-pkts>2</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>39232</tx-brate>
                                                        <rx-pkts>2</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>13280</rx-brate>
                                                        <dl-cqi>0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>30.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>2</ul-samples>
                                                        <dl-mcs>26.0</dl-mcs>
                                                        <dl-samples>3</dl-samples>
                                                        <imsi>1010123456789</imsi>
                                                    </PerUEReportListItem>
                                                </perUEReportList>
                                                <perSliceReportList>
                                                    <PerSliceReportListItem>
                                                        <sliceName>fast</sliceName>
                                                        <dl-PRBUsage>143320</dl-PRBUsage>
                                                        <ul-PRBUsage>2601</ul-PRBUsage>
                                                        <tx-pkts>13</tx-pkts>
                                                        <tx-errors>1</tx-errors>
                                                        <tx-brate>754008</tx-brate>
                                                        <rx-pkts>3</rx-pkts>
                                                        <rx-errors>0</rx-errors>
                                                        <rx-brate>17416</rx-brate>
                                                        <dl-cqi>0</dl-cqi>
                                                        <dl-ri>0</dl-ri>
                                                        <dl-pmi>0</dl-pmi>
                                                        <ul-phr>15.0</ul-phr>
                                                        <ul-sinr>0</ul-sinr>
                                                        <ul-rssi>0</ul-rssi>
                                                        <ul-mcs>0</ul-mcs>
                                                        <ul-samples>4</ul-samples>
                                                        <dl-mcs>26.916667938232422</dl-mcs>
                                                        <dl-samples>9</dl-samples>
                                                    </PerSliceReportListItem>
                                                </perSliceReportList>
                                            </du-PM-EPC>
                                        </ServedPlmnPerCellListItem>
                                    </servedPlmnPerCellList>
                                </CellResourceReportListItem>
                            </cellResourceReportList>
                        </oDU>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-CP>
                            <cu-CP-Resource-Status>
                                <numberOfActive-UEs>2</numberOfActive-UEs>
                            </cu-CP-Resource-Status>
                        </oCU-CP>
                    </performanceContainer>
                </PM-Containers-List>
                <PM-Containers-List>
                    <performanceContainer>
                        <oCU-UP>
                            <pf-ContainerList>
                                <PF-ContainerListItem>
                                    <interface-type><f1-u/></interface-type>
                                    <o-CU-UP-PM-Container>
                                        <plmnList>
                                            <PlmnID-List>
                                                <pLMN-Identity>00 F1 10</pLMN-Identity>
                                                <cu-UP-PM-EPC>
                                                    <perQCIReportList>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>0</qci>
                                                            <pDCPBytesDL>0</pDCPBytesDL>
                                                            <pDCPBytesUL>0</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                        <PerQCIReportListItemFormat>
                                                            <qci>7</qci>
                                                            <pDCPBytesDL>13215480</pDCPBytesDL>
                                                            <pDCPBytesUL>109824</pDCPBytesUL>
                                                        </PerQCIReportListItemFormat>
                                                    </perQCIReportList>
                                                    <perUEReportList>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>70</rnti>
                                                            <bytesDL>6663314</bytesDL>
                                                            <bytesUL>57616</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                        <PerUEReportListItemFormat>
                                                            <rnti>71</rnti>
                                                            <bytesDL>6552166</bytesDL>
                                                            <bytesUL>52208</bytesUL>
                                                        </PerUEReportListItemFormat>
                                                    </perUEReportList>
                                                    <perSliceReportList>
                                                        <PerSliceReportListItemFormat>
                                                            <sliceName>fast</sliceName>
                                                            <bytesDL>13215480</bytesDL>
                                                            <bytesUL>109824</bytesUL>
                                                        </PerSliceReportListItemFormat>
                                                    </perSliceReportList>
                                                </cu-UP-PM-EPC>
                                            </PlmnID-List>
                                        </plmnList>
                                    </o-CU-UP-PM-Container>
                                </PF-ContainerListItem>
                            </pf-ContainerList>
                        </oCU-UP>
                    </performanceContainer>
                </PM-Containers-List>
            </pm-Containers>
        </indicationMessage-Format1>
    </indicationMessage>
</E2SM-KPM-IndicationMessage>
{"ts":1737229184274,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"kpm indication report style 4 "}
{"ts":1737229184274,"crit":"DEBUG","id":"nexran","mdc":{},"msg":"nexran Indication handler"}
{"ts":1737229184275,"crit":"INFO","id":"nexran","mdc":{},"msg":"KpmIndication: KpmReport(period=5120 ms) available_dl_prbs=100 available_ul_prbs=100 ue[70]={dl_bytes=6663314,ul_bytes=57616,dl_prbs=71236,ul_prbs=1311,tx_pkts=11,tx_errors=0,tx_brate=714776,rx_pkts=1,rx_errors=0,rx_brate=4136,dl_cqi=0,dl_ri=0,dl_pmi=0,ul_phr=0,ul_sinr=0,ul_mcs=0,ul_samples=2,dl_mcs=27.8333,dl_samples=6,imsi=1010123456780,} ue[71]={dl_bytes=6552166,ul_bytes=52208,dl_prbs=72084,ul_prbs=1290,tx_pkts=2,tx_errors=1,tx_brate=39232,rx_pkts=2,rx_errors=0,rx_brate=13280,dl_cqi=0,dl_ri=0,dl_pmi=0,ul_phr=30,ul_sinr=0,ul_mcs=0,ul_samples=2,dl_mcs=26,dl_samples=3,imsi=1010123456789,} slice[fast]={dl_bytes=13215480,ul_bytes=109824,dl_prbs=143320,ul_prbs=2601,tx_pkts=13,tx_errors=1,tx_brate=754008,rx_pkts=3,rx_errors=0,rx_brate=17416,dl_cqi=0,dl_ri=0,dl_pmi=0,ul_phr=15,ul_sinr=0,ul_mcs=0,ul_samples=4,dl_mcs=26.9167,dl_samples=9,} "}
{"ts":1737229184289,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of UE Reports: 16"}
{"ts":1737229184289,"crit":"INFO","id":"nexran","mdc":{},"msg":"# of Slice Reports: 16"}
-- FETCHING DATA FROM INFLUXDB --
Data normalized with Min-Max Scaling. Min: [2. 0. 0.], Max: [145.   3.  15.]
Data array shape before reshaping: (32, 3)
Data array dtype: float32
Reshaped data array shape: (3, 10, 3)
Sample data (first sequence):
[[0.23076923 0.         1.        ]
 [0.26573426 0.         1.        ]
 [0.3216783  0.         1.        ]
 [0.34965035 0.33333334 1.        ]
 [0.5034965  0.         1.        ]
 [0.42657343 0.6666667  1.        ]
 [0.6573427  0.         1.        ]
 [0.6083916  0.6666667  1.        ]
 [0.74125874 0.         1.        ]
 [0.7202797  0.         1.        ]]
inside the try -------
Data tensor created with shape: torch.Size([3, 10, 3])
labels: tensor([0., 0., 0.])
Starting initial training phase first 32 kpm reports...
Training the model
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2998
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2983
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2968
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2953
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2938
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2922
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2906
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2889
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2873
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2855
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2837
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2819
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2799
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2779
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2757
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2733
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2707
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2680
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2649
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2615
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2577
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2489
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2440
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2389
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2337
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2288
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2243
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2204
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2170
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2141
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2116
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2094
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2074
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2057
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2041
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2026
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.2012
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1998
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1985
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1973
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1961
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1948
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1937
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1925
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1913
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1902
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1891
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1879
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1868
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1857
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1846
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1835
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1824
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1813
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1803
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1792
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1781
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1770
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1760
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1749
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1738
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1728
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1717
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1707
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1696
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1686
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1675
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1665
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1655
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1644
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1634
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1624
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1614
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1604
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1594
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1584
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1574
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1564
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1555
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1545
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1508
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1499
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1490
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1481
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1472
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1463
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1455
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1446
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1438
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1430
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1421
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1413
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1405
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1397
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1389
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1381
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1374
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1366
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1358
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1351
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1343
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1336
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1328
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1321
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1314
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1306
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1299
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1292
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1285
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1278
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1271
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1264
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1258
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1251
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1244
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1238
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1231
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1225
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1218
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1212
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1206
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1200
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1193
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1187
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1181
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1176
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1170
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1164
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1158
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1153
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1147
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1141
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1136
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1130
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1125
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1120
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1115
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1109
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1104
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1099
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1094
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1089
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1084
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1080
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1075
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1070
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1065
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1061
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1056
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1052
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1047
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1043
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1039
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1034
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1030
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1026
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1022
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1018
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1014
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1010
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1006
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.1002
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0998
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0994
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0991
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0987
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0983
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0979
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0976
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0972
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0969
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0965
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0962
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0959
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0955
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0952
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0949
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0946
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0942
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0939
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0936
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0933
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0930
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0927
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0924
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0921
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0918
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0915
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0912
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0910
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0907
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0904
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0901
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0899
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0896
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0894
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0891
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0888
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0886
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0883
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0881
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0878
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0876
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0874
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0871
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0869
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0867
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0864
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0862
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0860
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0858
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0855
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0853
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0851
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0849
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0847
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0845
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0843
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0841
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0839
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0837
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0835
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0833
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0831
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0829
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
1737229208751 1/RMR [INFO] sends: ts=1737229208 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737229208751 1/RMR [INFO] sends: ts=1737229208 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229208751 1/RMR [INFO] sends: ts=1737229208 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229208751 1/RMR [INFO] sends: ts=1737229208 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229208751 1/RMR [INFO] sends: ts=1737229208 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
Training completed for current batch. Loss: 0.0827
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0825
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0823
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0822
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0820
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0818
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0816
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0814
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0813
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0811
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0809
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0808
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0806
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0804
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0803
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0801
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0799
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0798
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0796
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0795
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0793
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0792
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0790
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0789
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0787
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0786
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0784
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0783
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0781
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0780
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0778
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0777
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0776
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0774
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0773
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0772
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0770
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0769
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0768
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0766
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0765
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0764
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0763
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0761
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0760
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0759
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0758
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0756
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0755
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0754
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0753
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0752
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0750
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0749
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0748
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0747
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0746
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0745
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0744
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0743
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0742
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0740
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0739
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0738
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0737
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0736
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0735
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0734
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0733
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0732
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0731
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0730
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0729
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0728
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0727
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0726
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0725
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0724
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0723
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0722
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0721
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0721
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0720
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0719
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0718
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0717
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0716
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0715
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0714
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0713
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0712
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0712
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0711
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0710
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0709
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0708
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0707
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0706
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0706
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0705
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0704
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0703
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0702
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0701
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0700
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0699
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0698
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0697
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0696
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0695
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0694
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0693
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0692
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0691
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0690
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0689
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0688
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0687
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0686
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0685
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0684
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0683
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0682
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0681
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0680
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0679
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0678
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0677
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0676
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0676
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0675
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0674
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0674
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0673
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0672
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0671
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0671
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0670
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0669
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0669
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0668
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0667
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0667
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0666
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0665
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0665
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0664
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0663
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0663
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0662
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0661
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0661
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0660
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0659
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0659
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0658
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0658
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0657
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0656
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0656
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0655
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0654
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0654
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0653
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0652
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0652
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0651
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0650
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0650
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0649
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0648
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0648
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0647
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0646
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0646
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0645
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0644
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0644
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0643
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0642
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0642
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0641
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0640
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0639
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0639
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0638
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0637
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0637
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0636
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0635
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0635
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0634
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0633
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0633
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0632
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0631
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0630
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0629
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0629
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0628
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0627
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0626
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0626
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0625
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0624
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0624
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0623
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0622
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0621
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0621
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0620
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0620
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0619
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0619
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0618
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0618
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0617
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0617
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0616
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0616
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0615
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0615
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0615
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0614
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0614
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0613
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0613
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0612
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0612
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0612
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0611
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0611
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0610
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0610
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0610
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0609
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0609
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0608
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0608
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0608
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0607
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0607
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0606
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0606
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0606
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0605
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0605
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0605
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0604
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0604
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0603
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0603
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0603
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0602
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0602
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0602
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0601
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0601
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0601
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0600
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0600
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0600
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0599
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0599
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0599
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0598
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0598
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0598
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0597
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0597
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0597
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0596
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0596
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0596
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0595
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0595
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0595
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0594
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0594
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0594
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0593
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0593
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0593
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0592
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0592
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0592
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0591
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0591
1737229239796 1/RMR [INFO] sends: ts=1737229239 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737229239796 1/RMR [INFO] sends: ts=1737229239 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229239796 1/RMR [INFO] sends: ts=1737229239 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229239796 1/RMR [INFO] sends: ts=1737229239 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229239796 1/RMR [INFO] sends: ts=1737229239 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0591
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0590
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0590
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0590
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0589
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0589
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0589
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0589
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0588
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0588
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0588
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0587
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0587
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0587
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0587
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0586
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0586
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0586
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0585
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0585
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0585
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0584
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0584
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0584
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0584
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0583
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0583
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0583
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0582
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0582
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0582
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0582
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0581
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0581
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0581
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0581
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0580
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0580
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0580
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0579
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0579
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0579
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0579
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0578
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0578
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0578
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0578
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0577
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0577
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0577
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0576
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0576
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0576
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0576
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0575
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0575
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0575
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0575
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0574
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0574
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0574
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0574
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0573
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0573
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0573
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0573
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0572
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0572
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0572
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0572
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0571
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0571
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0571
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0571
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0570
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0570
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0570
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0570
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0569
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0569
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0569
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0569
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0568
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0568
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0568
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0568
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0567
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0567
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0567
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0567
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0567
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0566
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0566
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0566
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0566
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0566
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0565
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0565
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0565
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0564
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0564
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0564
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0564
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0563
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0563
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0563
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0563
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0563
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0562
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0562
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0562
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0562
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0561
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0561
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0561
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0561
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0561
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0560
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0560
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0560
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0560
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0559
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0559
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0559
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0559
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0559
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0558
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0558
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0558
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0558
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0557
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0557
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0557
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0557
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0557
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0556
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0556
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0556
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0556
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0556
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0555
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0555
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0555
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0555
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0554
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0554
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0554
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0554
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0554
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0553
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0553
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0553
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0553
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0553
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0552
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0552
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0552
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0552
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0552
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0551
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0551
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0551
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0551
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0551
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0550
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0550
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0550
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0550
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0550
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0549
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0549
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0549
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0549
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0549
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0549
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0548
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0548
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0548
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0548
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0548
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0547
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0547
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0547
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0547
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0547
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0547
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0546
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0546
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0546
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0546
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0546
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0546
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0545
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0545
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0545
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0545
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0545
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0544
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0543
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0543
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0543
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0543
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0543
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0543
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0542
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0542
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0542
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0542
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0542
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0542
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0541
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0541
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0541
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0541
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0541
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0541
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0540
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0539
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0538
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0537
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0536
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0535
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0534
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0533
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0532
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
1737229270764 1/RMR [INFO] sends: ts=1737229270 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737229270764 1/RMR [INFO] sends: ts=1737229270 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229270764 1/RMR [INFO] sends: ts=1737229270 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229270764 1/RMR [INFO] sends: ts=1737229270 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229270764 1/RMR [INFO] sends: ts=1737229270 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0531
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0530
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0529
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0528
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0527
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0526
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0525
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0524
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0523
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0522
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0521
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0520
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0519
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0518
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0517
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0516
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0515
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0514
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0513
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Batch data shape: torch.Size([3, 10, 3])
Input x shape: torch.Size([3, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([3, 64])
Shape of latent: torch.Size([3, 32])
Shape of decoded hidden state: torch.Size([1, 3, 3])
Shape of decoded cell state: torch.Size([1, 3, 3])
Shape of decoder_input: torch.Size([3, 10, 64])
Shape of reconstructed output: torch.Size([3, 10, 3])
Reconstructed data shape: torch.Size([3, 10, 3])
Training completed for current batch. Loss: 0.0512
Initial training completed. Switching to evaluation mode...
Evaluation Batch 1: Batch data shape: torch.Size([1, 10, 3])
Evaluation Batch 2: Batch data shape: torch.Size([1, 10, 3])
Evaluation Batch 3: Batch data shape: torch.Size([1, 10, 3])
Evaluation started...
Model set to evaluation mode.
Initialized reconstruction_errors list.
Processing Batch 1/3: Batch data shape: torch.Size([1, 10, 3])
Input x shape: torch.Size([1, 10, 3])
Shape of encoder hidden state h[-1]: torch.Size([1, 64])
Shape of latent: torch.Size([1, 32])
Shape of decoded hidden state: torch.Size([1, 1, 3])
Shape of decoded cell state: torch.Size([1, 1, 3])
Shape of decoder_input: torch.Size([1, 10, 64])
Shape of reconstructed output: torch.Size([1, 10, 3])
1737229301774 1/RMR [INFO] sends: ts=1737229301 src=service-ricxapp-dc-rmr.ricxapp:4560 target=10.106.64.163:38000 open=1 succ=7 fail=0 (hard=0 soft=0)
1737229301774 1/RMR [INFO] sends: ts=1737229301 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2term-rmr-alpha.ricplt:38000 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229301774 1/RMR [INFO] sends: ts=1737229301 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-submgr-rmr.ricplt:4560 open=1 succ=2 fail=0 (hard=0 soft=0)
1737229301774 1/RMR [INFO] sends: ts=1737229301 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-e2mgr-rmr.ricplt:3801 open=0 succ=0 fail=0 (hard=0 soft=0)
1737229301774 1/RMR [INFO] sends: ts=1737229301 src=service-ricxapp-dc-rmr.ricxapp:4560 target=service-ricplt-a1mediator-rmr.ricplt:4562 open=0 succ=0 fail=0 (hard=0 soft=0)
